From 17b00c421bbecf2b3b792694682539322ef46808 Mon Sep 17 00:00:00 2001
From: Juliusz Sosinowicz <juliusz@wolfssl.com>
Date: Fri, 20 Jun 2025 19:46:06 +0200
Subject: [PATCH] wolfSSL Patch

This patch implements wolfSSL support in libspdm.

Compile wolfSSL with:
  ./configure --enable-all --enable-static CFLAGS='-DRSA_MIN_SIZE=512'
  make
  make install

Compile libspdm with:
  mkdir build
  cd build
  cmake -DARCH=x64 -DTOOLCHAIN=GCC -DTARGET=Release -DCRYPTO=wolfssl -DENABLE_BINARY_BUILD=1 -DCOMPILED_LIBWOLFSSL_PATH=/usr/local/lib/libwolfssl.a -DWOLFSSL_INCDIR=/usr/local/include ..
  make

Tests passed:
- test_crypt (must be run in unit_test/sample_key)
- test_spdm_secured_message
- test_spdm_crypt (must be run in unit_test/sample_key)

When building for FIPS or with wolfSSL releases 5.7.2 and older add `CPPFLAGS=-DRSA_LOW_MEM` to the wolfSSL configuration:
  ./configure --enable-all CPPFLAGS=-DRSA_LOW_MEM

To debug the binary, configure wolfSSL with `--enable-debug` and libspdm with `-DTARGET=Debug`
---
 CMakeLists.txt                                | 36 +++++++++++++++-
 include/library/spdm_lib_config.h             | 16 +++++++
 library/spdm_crypt_lib/libspdm_crypt_cert.c   |  2 +
 os_stub/cryptlib_openssl/CMakeLists.txt       | 27 +++++++++---
 os_stub/cryptlib_openssl/hmac/hmac_sha.c      |  2 +
 os_stub/cryptlib_openssl/hmac/hmac_sha3.c     |  1 +
 os_stub/cryptlib_openssl/internal_crypt_lib.h |  2 +
 os_stub/cryptlib_openssl/pem/pem.c            |  5 +++
 os_stub/cryptlib_openssl/pk/ec.c              |  1 +
 os_stub/cryptlib_openssl/pk/rsa_ext.c         |  6 +++
 os_stub/cryptlib_openssl/pk/x509.c            | 43 +++++++++++++++++--
 11 files changed, 130 insertions(+), 11 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 56562e72..52aaa797 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,11 +11,17 @@ message("#########################")
 message("## Build Configuration ##")
 message("#########################")
 
+if(CRYPTO STREQUAL "wolfssl")
+    set(IS_WOLFSSL "1")
+    set(CRYPTO "openssl")
+	add_definitions(-DSPDM_USING_WOLFSSL)
+endif()
+
 set(CMAKE_GENERATOR ${CMAKE_GENERATOR} CACHE STRING "Choose the generator of cmake")
 set(ARCH ${ARCH} CACHE STRING "Choose the arch of build: ia32 x64 arm aarch64 riscv32 riscv64 arc" FORCE)
 set(TOOLCHAIN ${TOOLCHAIN} CACHE STRING "Choose the toolchain of build: Windows: VS2015 VS2019 VS2022 CLANG ARM_DS2022 LIBFUZZER Linux: GCC ARM_DS2022 ARM_GNU ARM_GNU_BARE_METAL ARM_GCC AARCH64_GCC RISCV_GNU RISCV64_GCC RISCV_XPACK ARC_GCC CLANG CBMC AFL KLEE LIBFUZZER" FORCE)
 set(CMAKE_BUILD_TYPE ${TARGET} CACHE STRING "Choose the target of build: Debug Release" FORCE)
-set(CRYPTO ${CRYPTO} CACHE STRING "Choose the crypto of build: mbedtls openssl" FORCE)
+set(CRYPTO ${CRYPTO} CACHE STRING "Choose the crypto of build: mbedtls openssl wolfssl" FORCE)
 set(GCOV ${GCOV} CACHE STRING "Choose the target of Gcov: ON  OFF, and default is OFF" FORCE)
 set(STACK_USAGE ${STACK_USAGE} CACHE STRING "Choose the target of STACK_USAGE: ON  OFF, and default is OFF" FORCE)
 set(BUILD_LINUX_SHARED_LIB ${BUILD_LINUX_SHARED_LIB} CACHE STRING "Choose if libspdm shared library should be built for linux: ON OFF, and default is OFF" FORCE)
@@ -178,9 +184,14 @@ endif()
 
 if(ENABLE_BINARY_BUILD STREQUAL "1")
     if(NOT CRYPTO STREQUAL "openssl")
-        message(FATAL_ERROR "enabling binary build not supported for non-openssl")
+        message(FATAL_ERROR "enabling binary build not supported for non-(openssl|wolfssl)")
     endif()
 
+	if(IS_WOLFSSL STREQUAL "1")
+    if(NOT COMPILED_LIBWOLFSSL_PATH)
+        message(FATAL_ERROR "enabling binary build requires path to libwolfssl.")
+    endif()
+    else()
     if(NOT COMPILED_LIBCRYPTO_PATH)
         message(FATAL_ERROR "enabling binary build requires path to libcrypto.")
     endif()
@@ -188,6 +199,9 @@ if(ENABLE_BINARY_BUILD STREQUAL "1")
     if(NOT COMPILED_LIBSSL_PATH)
         message(FATAL_ERROR "enabling binary build requires path to libssl.")
     endif()
+    endif()
+   
+   set(WOLFSSL_INCDIR ${WOLFSSL_INCDIR} CACHE STRING "Optionally provide a path to the wolfssl header directory" FORCE)
 
     # Disable EDDSA when binary builds are enabled. EDDSA may be enabled in the future.
     add_definitions(-DLIBSPDM_EDDSA_ED25519_SUPPORT=0)
@@ -196,9 +210,14 @@ if(ENABLE_BINARY_BUILD STREQUAL "1")
     message("ENABLE_BINARY_BUILD=1")
     message("COMPILED_LIBCRYPTO_PATH=${COMPILED_LIBCRYPTO_PATH}")
     message("COMPILED_LIBSSL_PATH=${COMPILED_LIBSSL_PATH}")
+    message("COMPILED_LIBWOLFSSL_PATH=${COMPILED_LIBWOLFSSL_PATH}")
     message("Disabling EDDSA support due to ENABLE_BINARY_BUILD=1")
 
+	if(IS_WOLFSSL STREQUAL "1")
+    set(CRYPTO_LIB_PATHS ${COMPILED_LIBWOLFSSL_PATH} -lm)
+	else()
     set(CRYPTO_LIB_PATHS ${COMPILED_LIBCRYPTO_PATH} ${COMPILED_LIBSSL_PATH})
+    endif()
 
 else()
     set(CRYPTO_LIB_PATHS ${CRYPTO}lib)
@@ -1092,6 +1111,18 @@ else()
                 PUBLIC mbedcrypto
             )
         elseif(CRYPTO STREQUAL "openssl")
+			if(IS_WOLFSSL STREQUAL "1")
+	            set(CRYPTO_DEPS "-lwolfssl -lm")
+	            if(TOOLCHAIN STREQUAL "NONE")
+	                target_link_libraries(${LIB_NAME}_crypto
+	                    PUBLIC cryptlib_openssl
+	                )
+	            else()
+	                target_link_libraries(${LIB_NAME}_crypto
+	                    PUBLIC wolfssl
+	                )
+	            endif()
+			else()
             set(CRYPTO_DEPS "-lssl -lcrypto")
             if(TOOLCHAIN STREQUAL "NONE")
                 target_link_libraries(${LIB_NAME}_crypto
@@ -1104,6 +1135,7 @@ else()
                     PUBLIC crypto
                 )
             endif()
+            endif()
         endif()
 
         target_link_libraries(${LIB_NAME}
diff --git a/include/library/spdm_lib_config.h b/include/library/spdm_lib_config.h
index 16028930..dd0fcbcc 100644
--- a/include/library/spdm_lib_config.h
+++ b/include/library/spdm_lib_config.h
@@ -283,8 +283,12 @@
 #endif
 
 #ifndef LIBSPDM_SM2_DSA_P256_SUPPORT
+#ifdef SPDM_USING_WOLFSSL /* No SM support in EVP layer */
+#define LIBSPDM_SM2_DSA_P256_SUPPORT 0
+#else
 #define LIBSPDM_SM2_DSA_P256_SUPPORT 1
 #endif
+#endif
 
 #ifndef LIBSPDM_EDDSA_ED25519_SUPPORT
 #define LIBSPDM_EDDSA_ED25519_SUPPORT 1
@@ -314,8 +318,12 @@
 #endif
 
 #ifndef LIBSPDM_SM2_KEY_EXCHANGE_P256_SUPPORT
+#ifdef SPDM_USING_WOLFSSL
+#define LIBSPDM_SM2_KEY_EXCHANGE_P256_SUPPORT 0
+#else
 #define LIBSPDM_SM2_KEY_EXCHANGE_P256_SUPPORT 1
 #endif
+#endif
 
 #ifndef LIBSPDM_AEAD_AES_128_GCM_SUPPORT
 #define LIBSPDM_AEAD_AES_128_GCM_SUPPORT 1
@@ -329,8 +337,12 @@
 #endif
 
 #ifndef LIBSPDM_AEAD_SM4_128_GCM_SUPPORT
+#ifdef SPDM_USING_WOLFSSL
+#define LIBSPDM_AEAD_SM4_128_GCM_SUPPORT 0
+#else
 #define LIBSPDM_AEAD_SM4_128_GCM_SUPPORT 1
 #endif
+#endif
 
 #ifndef LIBSPDM_SHA256_SUPPORT
 #define LIBSPDM_SHA256_SUPPORT 1
@@ -353,8 +365,12 @@
 #endif
 
 #ifndef LIBSPDM_SM3_256_SUPPORT
+#ifdef SPDM_USING_WOLFSSL
+#define LIBSPDM_SM3_256_SUPPORT 0
+#else
 #define LIBSPDM_SM3_256_SUPPORT 1
 #endif
+#endif
 
 /* If 1 then endpoint supports parsing X.509 certificate chains. */
 #ifndef LIBSPDM_CERT_PARSE_SUPPORT
diff --git a/library/spdm_crypt_lib/libspdm_crypt_cert.c b/library/spdm_crypt_lib/libspdm_crypt_cert.c
index aea42f8b..0cc9b82e 100644
--- a/library/spdm_crypt_lib/libspdm_crypt_cert.c
+++ b/library/spdm_crypt_lib/libspdm_crypt_cert.c
@@ -911,11 +911,13 @@ static bool libspdm_verify_leaf_cert_spdm_eku(const uint8_t *cert, size_t cert_s
     req_auth_oid_find_success = false;
     rsp_auth_oid_find_success = false;
 
+#ifndef SPDM_USING_WOLFSSL /* wolfssl returns data without sequence tag */
     status = libspdm_asn1_get_tag(&ptr, eku + eku_size, &obj_len,
                                   LIBSPDM_CRYPTO_ASN1_SEQUENCE | LIBSPDM_CRYPTO_ASN1_CONSTRUCTED);
     if (!status) {
         return false;
     }
+#endif
 
     while(ptr < eku + eku_size) {
         status = libspdm_asn1_get_tag(&ptr, eku + eku_size, &obj_len, LIBSPDM_CRYPTO_ASN1_OID);
diff --git a/os_stub/cryptlib_openssl/CMakeLists.txt b/os_stub/cryptlib_openssl/CMakeLists.txt
index cad55aea..df08fae2 100644
--- a/os_stub/cryptlib_openssl/CMakeLists.txt
+++ b/os_stub/cryptlib_openssl/CMakeLists.txt
@@ -2,6 +2,19 @@ cmake_minimum_required(VERSION 3.5)
 
 add_library(cryptlib_openssl STATIC "")
 
+if (IS_WOLFSSL STREQUAL "1")
+message("WOLFSSL_INCDIR = ${WOLFSSL_INCDIR}")
+add_definitions(-DWOLFSSL_USE_OPTIONS_H)
+target_include_directories(cryptlib_openssl
+    PRIVATE
+        ${LIBSPDM_DIR}/include
+        ${LIBSPDM_DIR}/include/hal
+        ${LIBSPDM_DIR}/os_stub/include
+        ${LIBSPDM_DIR}/os_stub/cryptlib_openssl
+        ${WOLFSSL_INCDIR}
+        ${WOLFSSL_INCDIR}/wolfssl
+)
+else()
 target_include_directories(cryptlib_openssl
     PRIVATE
         ${LIBSPDM_DIR}/include
@@ -14,27 +27,31 @@ target_include_directories(cryptlib_openssl
         ${LIBSPDM_DIR}/os_stub/openssllib/openssl/crypto/include
         ${LIBSPDM_DIR}/os_stub/openssllib/openssl
 )
+target_sources(cryptlib_openssl
+    PRIVATE
+        cipher/aead_sm4_gcm.c
+        hash/sm3.c
+        kdf/hkdf_sm3.c
+        hmac/hmac_sm3.c
+        pk/sm2.c
+)
+endif()
 
 target_sources(cryptlib_openssl
     PRIVATE
         cipher/aead_aes_gcm.c
         cipher/aead_chacha20_poly1305.c
-        cipher/aead_sm4_gcm.c
         der/der.c
         hash/sha.c
         hash/sha3.c
-        hash/sm3.c
         hmac/hmac_sha.c
         hmac/hmac_sha3.c
-        hmac/hmac_sm3.c
         kdf/hkdf_sha.c
         kdf/hkdf_sha3.c
-        kdf/hkdf_sm3.c
         pem/pem.c
         pk/ec.c
         pk/ecd.c
         pk/dh.c
-        pk/sm2.c
         pk/rsa_basic.c
         pk/rsa_ext.c
         pk/x509.c
diff --git a/os_stub/cryptlib_openssl/hmac/hmac_sha.c b/os_stub/cryptlib_openssl/hmac/hmac_sha.c
index 12d5d6c2..229271d7 100644
--- a/os_stub/cryptlib_openssl/hmac/hmac_sha.c
+++ b/os_stub/cryptlib_openssl/hmac/hmac_sha.c
@@ -10,6 +10,8 @@
 
 #include "internal_crypt_lib.h"
 #include <openssl/hmac.h>
+#include <openssl/evp.h>
+#include <limits.h>
 
 /**
  * Allocates and initializes one HMAC_CTX context for subsequent HMAC-MD use.
diff --git a/os_stub/cryptlib_openssl/hmac/hmac_sha3.c b/os_stub/cryptlib_openssl/hmac/hmac_sha3.c
index ed2fdda3..7eca0c5e 100644
--- a/os_stub/cryptlib_openssl/hmac/hmac_sha3.c
+++ b/os_stub/cryptlib_openssl/hmac/hmac_sha3.c
@@ -10,6 +10,7 @@
 
 #include "internal_crypt_lib.h"
 #include <openssl/hmac.h>
+#include <openssl/evp.h>
 
 void *hmac_md_new(void);
 void hmac_md_free(void *hmac_md_ctx);
diff --git a/os_stub/cryptlib_openssl/internal_crypt_lib.h b/os_stub/cryptlib_openssl/internal_crypt_lib.h
index d7a4fdf3..dc3830c9 100644
--- a/os_stub/cryptlib_openssl/internal_crypt_lib.h
+++ b/os_stub/cryptlib_openssl/internal_crypt_lib.h
@@ -18,7 +18,9 @@
 #include "library/cryptlib.h"
 #include "library/spdm_crypt_lib.h"
 
+#ifndef SPDM_USING_WOLFSSL
 #include "crt_support.h"
+#endif
 
 #include <openssl/opensslv.h>
 
diff --git a/os_stub/cryptlib_openssl/pem/pem.c b/os_stub/cryptlib_openssl/pem/pem.c
index 0f9a28ea..922d3684 100644
--- a/os_stub/cryptlib_openssl/pem/pem.c
+++ b/os_stub/cryptlib_openssl/pem/pem.c
@@ -232,6 +232,10 @@ bool libspdm_ecd_get_private_key_from_pem(const uint8_t *pem_data,
                                           const char *password,
                                           void **ecd_context)
 {
+#ifdef SPDM_USING_WOLFSSL
+    /* No ED support in EVP layer */
+    return false;
+#else
     bool status;
     BIO *pem_bio;
     EVP_PKEY *pkey;
@@ -292,6 +296,7 @@ done:
     BIO_free(pem_bio);
 
     return status;
+#endif
 }
 
 /**
diff --git a/os_stub/cryptlib_openssl/pk/ec.c b/os_stub/cryptlib_openssl/pk/ec.c
index c540dacd..1d8f3ccb 100644
--- a/os_stub/cryptlib_openssl/pk/ec.c
+++ b/os_stub/cryptlib_openssl/pk/ec.c
@@ -15,6 +15,7 @@
 #include <openssl/bn.h>
 #include <openssl/ec.h>
 #include <openssl/objects.h>
+#include <openssl/ecdh.h>
 
 /**
  * Allocates and Initializes one Elliptic Curve context for subsequent use
diff --git a/os_stub/cryptlib_openssl/pk/rsa_ext.c b/os_stub/cryptlib_openssl/pk/rsa_ext.c
index ae3c8d8a..8f0ecd7c 100644
--- a/os_stub/cryptlib_openssl/pk/rsa_ext.c
+++ b/os_stub/cryptlib_openssl/pk/rsa_ext.c
@@ -247,6 +247,7 @@ bool libspdm_rsa_check_key(void *rsa_context)
     }
 
     if (RSA_check_key((RSA *)rsa_context) != 1) {
+#ifndef SPDM_USING_WOLFSSL
         reason = ERR_GET_REASON(ERR_peek_last_error());
         if (reason == RSA_R_P_NOT_PRIME ||
             reason == RSA_R_Q_NOT_PRIME ||
@@ -254,6 +255,11 @@ bool libspdm_rsa_check_key(void *rsa_context)
             reason == RSA_R_D_E_NOT_CONGRUENT_TO_1) {
             return false;
         }
+#else
+        /* wolfSSL does not set a reason */
+        (void)reason;
+        return false;
+#endif
     }
 
     return true;
diff --git a/os_stub/cryptlib_openssl/pk/x509.c b/os_stub/cryptlib_openssl/pk/x509.c
index 40e0c8ff..7c147273 100644
--- a/os_stub/cryptlib_openssl/pk/x509.c
+++ b/os_stub/cryptlib_openssl/pk/x509.c
@@ -74,6 +74,19 @@ bool libspdm_x509_construct_certificate(const uint8_t *cert, size_t cert_size,
     return true;
 }
 
+#ifndef LIBSPDM_VA_LIST
+#define LIBSPDM_VA_LIST va_list
+#endif
+#ifndef LIBSPDM_VA_ARG
+#define LIBSPDM_VA_ARG va_arg
+#endif
+#ifndef LIBSPDM_VA_START
+#define LIBSPDM_VA_START va_start
+#endif
+#ifndef LIBSPDM_VA_END
+#define LIBSPDM_VA_END va_end
+#endif
+
 /**
  * Construct a X509 stack object from a list of DER-encoded certificate data.
  *
@@ -1128,7 +1141,12 @@ bool libspdm_x509_get_validity(const uint8_t *cert, size_t cert_size,
         goto done;
     }
 
-    f_size = sizeof(ASN1_TIME) + f_time->length;
+    /* WOLFSSL_ASN1_TIME has not pointer so it can be directly copied */
+    f_size = sizeof(ASN1_TIME)
+#ifndef SPDM_USING_WOLFSSL
+            + f_time->length
+#endif
+            ;
     if (*from_size < f_size) {
         *from_size = f_size;
         res = false;
@@ -1136,14 +1154,20 @@ bool libspdm_x509_get_validity(const uint8_t *cert, size_t cert_size,
     }
     if (from != NULL) {
         libspdm_copy_mem(from, *from_size, f_time, sizeof(ASN1_TIME));
+#ifndef SPDM_USING_WOLFSSL
         ((ASN1_TIME *)from)->data = from + sizeof(ASN1_TIME);
         libspdm_copy_mem(from + sizeof(ASN1_TIME),
                          *from_size - sizeof(ASN1_TIME),
                          f_time->data, f_time->length);
+#endif
     }
     *from_size = f_size;
 
-    t_size = sizeof(ASN1_TIME) + t_time->length;
+    t_size = sizeof(ASN1_TIME)
+#ifndef SPDM_USING_WOLFSSL
+            + t_time->length
+#endif
+            ;
     if (*to_size < t_size) {
         *to_size = t_size;
         res = false;
@@ -1151,10 +1175,12 @@ bool libspdm_x509_get_validity(const uint8_t *cert, size_t cert_size,
     }
     if (to != NULL) {
         libspdm_copy_mem(to, *to_size, t_time, sizeof(ASN1_TIME));
+#ifndef SPDM_USING_WOLFSSL
         ((ASN1_TIME *)to)->data = to + sizeof(ASN1_TIME);
         libspdm_copy_mem(to + sizeof(ASN1_TIME),
                          *to_size - sizeof(ASN1_TIME),
                          t_time->data, t_time->length);
+#endif
     }
     *to_size = t_size;
 
@@ -1223,11 +1249,13 @@ bool libspdm_x509_set_date_time(const char *date_time_str, void *date_time, size
     }
     if (date_time != NULL) {
         libspdm_copy_mem(date_time, *date_time_size, dt, sizeof(ASN1_TIME));
+#ifndef SPDM_USING_WOLFSSL
         ((ASN1_TIME *)date_time)->data =
             (uint8_t *)date_time + sizeof(ASN1_TIME);
         libspdm_copy_mem((uint8_t *)date_time + sizeof(ASN1_TIME),
                          *date_time_size - sizeof(ASN1_TIME),
                          dt->data, dt->length);
+#endif
     }
     *date_time_size = d_size;
     status = true;
@@ -1365,7 +1393,7 @@ bool libspdm_x509_get_extension_data(const uint8_t *cert, size_t cert_size,
     /* Retrieve extensions from certificate object.*/
 
     extensions = X509_get0_extensions(x509_cert);
-    if (sk_X509_EXTENSION_num(extensions) <= 0) {
+    if (sk_X509_EXTENSION_num((STACK_OF(X509_EXTENSION)*)extensions) <= 0) {
         *extension_data_size = 0;
         goto cleanup;
     }
@@ -1375,7 +1403,7 @@ bool libspdm_x509_get_extension_data(const uint8_t *cert, size_t cert_size,
     status = false;
     asn1_oct = NULL;
     oct_length = 0;
-    for (i = 0; i < sk_X509_EXTENSION_num(extensions); i++) {
+    for (i = 0; i < sk_X509_EXTENSION_num((STACK_OF(X509_EXTENSION)*)extensions); i++) {
         ext = sk_X509_EXTENSION_value(extensions, (int)i);
         if (ext == NULL) {
             continue;
@@ -1661,6 +1689,10 @@ done:
 bool libspdm_ecd_get_public_key_from_x509(const uint8_t *cert, size_t cert_size,
                                           void **ecd_context)
 {
+#ifdef SPDM_USING_WOLFSSL
+    /* No ED support in EVP layer */
+    return false;
+#else
     bool res;
     EVP_PKEY *pkey;
     X509 *x509_cert;
@@ -1711,6 +1743,7 @@ done:
     }
 
     return res;
+#endif
 }
 
 /**
@@ -2634,9 +2667,11 @@ bool libspdm_gen_x509_csr(size_t hash_nid, size_t asym_nid,
     case LIBSPDM_CRYPTO_NID_SHA3_512:
         md = EVP_sha3_512();
         break;
+#ifndef SPDM_USING_WOLFSSL
     case LIBSPDM_CRYPTO_NID_SM3_256:
         md = EVP_sm3();
         break;
+#endif
     default:
         ret = 0;
         goto free_all;
-- 
2.43.0

