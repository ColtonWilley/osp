diff --git a/configure.in b/configure.in
index 03b5c3a..bbcf728 100644
--- a/configure.in
+++ b/configure.in
@@ -246,8 +246,8 @@ OL_ARG_WITH(fetch,[  --with-fetch		  with fetch(3) URL support],
 	auto, [auto yes no] )
 OL_ARG_WITH(threads,[  --with-threads	  with threads],
 	auto, [auto nt posix mach pth lwp yes no manual] )
-OL_ARG_WITH(tls,[  --with-tls		  with TLS/SSL support auto|openssl|gnutls|moznss],
-	auto, [auto openssl gnutls moznss yes no] )
+OL_ARG_WITH(tls,[  --with-tls		  with TLS/SSL support auto|openssl|gnutls|moznss|wolfssl],
+	auto, [auto openssl gnutls moznss wolfssl yes no] )
 OL_ARG_WITH(yielding_select,
 	[  --with-yielding-select  with implicitly yielding select],
 	auto, [auto yes no manual] )
@@ -1262,6 +1262,42 @@ if test $ol_link_tls = no ; then
 	fi
 fi
 
+dnl NOTE: caller must specify CPPFLAGS=-I/path/to/wolfssl/ to pick up
+dnl OpenSSL compatibility headers (e.g. /usr/local/include/wolfssl).
+if test $ol_link_tls = no ; then
+	if test $ol_with_tls = wolfssl || test $ol_with_tls = auto ; then
+		have_wolfssl=no
+
+		AC_CHECK_HEADERS([wolfssl/options.h])
+		if test "$ac_cv_header_wolfssl_options_h" = no &&
+		   test $ol_with_tls = wolfssl ; then
+			AC_MSG_ERROR([wolfSSL not found)])
+		fi
+
+		AC_RUN_IFELSE([AC_LANG_PROGRAM([
+		#include <wolfssl/options.h>
+		],[
+		#ifndef OPENSSL_EXTRA
+		exit(1);
+		#endif
+		])], [have_wolfssl=yes])
+
+		if test "$have_wolfssl" = yes ; then
+			ol_with_tls=wolfssl
+			ol_link_tls=yes
+
+			TLS_LIBS="-lwolfssl"
+
+			AC_DEFINE(HAVE_WOLFSSL, 1,
+				[define if you have wolfSSL])
+		else
+			if test $ol_with_tls = wolfssl ; then
+				AC_MSG_ERROR([wolfSSL not compiled with OpenSSL compatibility layer. Re-compile and install wolfSSL with OPENSSL_EXTRA defined.)])
+			fi
+		fi
+	fi
+fi
+
 WITH_TLS=no
 if test $ol_link_tls = yes ; then
 	AC_DEFINE(HAVE_TLS, 1, [define if you have TLS])
diff --git a/libraries/libldap/init.c b/libraries/libldap/init.c
index 182ef7d..266de12 100644
--- a/libraries/libldap/init.c
+++ b/libraries/libldap/init.c
@@ -133,7 +133,7 @@ static const struct ol_attribute {
 	{0, ATTR_TLS,	"TLS_PROTOCOL_MIN",	NULL,	LDAP_OPT_X_TLS_PROTOCOL_MIN},
 	{0, ATTR_TLS,	"TLS_ECNAME",		NULL,	LDAP_OPT_X_TLS_ECNAME},
 
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	{0, ATTR_TLS,	"TLS_CRLCHECK",		NULL,	LDAP_OPT_X_TLS_CRLCHECK},
 #endif
 #ifdef HAVE_GNUTLS
diff --git a/libraries/libldap/tls2.c b/libraries/libldap/tls2.c
index 82ca527..3c16fab 100644
--- a/libraries/libldap/tls2.c
+++ b/libraries/libldap/tls2.c
@@ -500,6 +500,10 @@ ldap_pvt_tls_get_peer_dn( void *s, struct berval *dn,
 
 	rc = ldap_X509dn2bv( &bvdn, dn, 
 			    (LDAPDN_rewrite_func *)func, flags);
+#ifdef HAVE_WOLFSSL
+	/* see comment in tlso_session_peer_dn */
+	free(bvdn.bv_val);
+#endif
 	return rc;
 }
 
@@ -581,7 +585,7 @@ ldap_int_tls_config( LDAP *ld, int option, const char *arg )
 		}
 		return ldap_pvt_tls_set_option( ld, option, &i );
 		}
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	case LDAP_OPT_X_TLS_CRLCHECK:	/* OpenSSL only */
 		i = -1;
 		if ( strcasecmp( arg, "none" ) == 0 ) {
@@ -671,7 +675,7 @@ ldap_pvt_tls_get_option( LDAP *ld, int option, void *arg )
 	case LDAP_OPT_X_TLS_REQUIRE_SAN:
 		*(int *)arg = lo->ldo_tls_require_san;
 		break;
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	case LDAP_OPT_X_TLS_CRLCHECK:	/* OpenSSL only */
 		*(int *)arg = lo->ldo_tls_crlcheck;
 		break;
@@ -815,7 +819,7 @@ ldap_pvt_tls_set_option( LDAP *ld, int option, void *arg )
 			return 0;
 		}
 		return -1;
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	case LDAP_OPT_X_TLS_CRLCHECK:	/* OpenSSL only */
 		if ( !arg ) return -1;
 		switch( *(int *) arg ) {
@@ -1009,8 +1013,13 @@ ldap_pvt_tls_get_my_dn( void *s, struct berval *dn, LDAPDN_rewrite_dummy *func,
 	int rc;
 
 	rc = tls_imp->ti_session_my_dn( session, &der_dn );
-	if ( rc == LDAP_SUCCESS )
+	if ( rc == LDAP_SUCCESS ) {
 		rc = ldap_X509dn2bv(&der_dn, dn, (LDAPDN_rewrite_func *)func, flags );
+#ifdef HAVE_WOLFSSL
+		/* see comment in tlso_session_peer_dn */
+		free(der_dn.bv_val);
+#endif
+	}
 	return rc;
 }
 #endif /* HAVE_TLS */
diff --git a/libraries/libldap/tls_o.c b/libraries/libldap/tls_o.c
index a13f11f..0c5239d 100644
--- a/libraries/libldap/tls_o.c
+++ b/libraries/libldap/tls_o.c
@@ -18,7 +18,7 @@
 
 #include "portable.h"
 
-#ifdef HAVE_OPENSSL
+#if defined(HAVE_OPENSSL) || defined(HAVE_WOLFSSL)
 
 #include "ldap_config.h"
 
@@ -37,12 +37,17 @@
 #include "ldap-int.h"
 #include "ldap-tls.h"
 
-#ifdef HAVE_OPENSSL_SSL_H
+#if defined(HAVE_OPENSSL_SSL_H) || defined(HAVE_WOLFSSL)
+#ifdef HAVE_WOLFSSL
+#include <wolfssl/options.h>
+#endif
 #include <openssl/ssl.h>
 #include <openssl/x509v3.h>
 #include <openssl/err.h>
 #include <openssl/rand.h>
+#ifndef HAVE_WOLFSSL
 #include <openssl/safestack.h>
+#endif
 #include <openssl/bn.h>
 #include <openssl/rsa.h>
 #include <openssl/dh.h>
@@ -89,7 +94,7 @@ static void tlso_locking_cb( int mode, int type, const char *file, int line )
 	}
 }
 
-#if OPENSSL_VERSION_NUMBER >= 0x0909000
+#if OPENSSL_VERSION_NUMBER >= 0x0909000 && !defined(HAVE_WOLFSSL)
 static void tlso_thread_self( CRYPTO_THREADID *id )
 {
 	CRYPTO_THREADID_set_pointer( id, (void *)ldap_pvt_thread_self() );
@@ -127,7 +132,7 @@ static void tlso_thr_init( void ) {}
 #endif
 #endif /* OpenSSL 1.1 */
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+#if OPENSSL_VERSION_NUMBER < 0x10100000 && !defined(HAVE_WOLFSSL)
 /*
  * OpenSSL 1.1 API and later makes the BIO method concrete types internal.
  */
@@ -164,6 +169,7 @@ BIO_meth_free( BIO_METHOD *meth )
 
 #endif /* OpenSSL 1.1 */
 
+#ifndef HAVE_WOLFSSL
 static STACK_OF(X509_NAME) *
 tlso_ca_list( char * bundle, char * dir )
 {
@@ -189,6 +195,7 @@ tlso_ca_list( char * bundle, char * dir )
 #endif
 	return ca_list;
 }
+#endif
 
 /*
  * Initialize TLS subsystem. Should be called only once.
@@ -216,8 +223,10 @@ tlso_init( void )
 	OPENSSL_init_ssl(0, NULL);
 #endif
 
+#ifndef HAVE_WOLFSSL
 	/* FIXME: mod_ssl does this */
 	X509V3_add_standard_extensions();
+#endif
 
 	tlso_bio_method = tlso_bio_setup();
 
@@ -260,7 +269,7 @@ static void
 tlso_ctx_ref( tls_ctx *ctx )
 {
 	tlso_ctx *c = (tlso_ctx *)ctx;
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+#if OPENSSL_VERSION_NUMBER < 0x10100000 && !defined(HAVE_WOLFSSL)
 #define	SSL_CTX_up_ref(ctx)	CRYPTO_add( &(ctx->references), 1, CRYPTO_LOCK_SSL_CTX )
 #endif
 	SSL_CTX_up_ref( c );
@@ -344,7 +353,38 @@ tlso_ctx_init( struct ldapoptions *lo, struct ldaptls *lt, int is_server )
 		if ( is_server ) {
 			STACK_OF(X509_NAME) *calist;
 			/* List of CA names to send to a client */
+#ifdef HAVE_WOLFSSL
+			WOLFSSL_CERT_MANAGER* cert_manager = NULL;
+			STACK_OF(X509) *certs = NULL;
+			X509 *x509;
+			int i;
+
+			if ((cert_manager = wolfSSL_CTX_GetCertManager(ctx)) == NULL) {
+				Debug( LDAP_DEBUG_ANY, "TLS: could not get cert manager\n",
+						0, 0, 0 );
+				tlso_report_error();
+				return -1;
+			}
+
+			if ((certs = wolfSSL_CertManagerGetCerts(cert_manager)) == NULL) {
+				Debug(LDAP_DEBUG_ANY, "TLS: could not load certs from cert "
+						"manager\n", 0, 0, 0);
+				tlso_report_error();
+				return -1;
+			}
+
+			for (i = 0; i < wolfSSL_sk_num(certs); ++i) {
+				x509 = wolfSSL_sk_X509_value(certs, i);
+				if (wolfSSL_X509_check_ca(x509) == 1) {
+					wolfSSL_sk_X509_NAME_push(calist,
+						wolfSSL_X509_get_subject_name(x509));
+				}
+			}
+
+			wolfSSL_sk_X509_free(certs);
+#else
 			calist = tlso_ca_list( lt->lt_cacertfile, lt->lt_cacertdir );
+#endif
 			if ( !calist ) {
 				Debug( LDAP_DEBUG_ANY, "TLS: "
 					"could not load client CA list (file:`%s',dir:`%s').\n",
@@ -424,7 +464,7 @@ tlso_ctx_init( struct ldapoptions *lo, struct ldaptls *lt, int is_server )
 	 * This is a NOP in OpenSSL 1.1.0 and later, where curves are always
 	 * auto-negotiated.
 	 */
-#if OPENSSL_VERSION_NUMBER < 0x10100000UL
+#if OPENSSL_VERSION_NUMBER < 0x10100000UL && !defined(HAVE_WOLFSSL)
 		if ( SSL_CTX_set_ecdh_auto( ctx, 1 ) <= 0 ) {
 			Debug( LDAP_DEBUG_ANY,
 				"TLS: could not enable automatic EC negotiation.\n", 0, 0, 0 );
@@ -452,7 +492,7 @@ tlso_ctx_init( struct ldapoptions *lo, struct ldaptls *lt, int is_server )
 #if OPENSSL_VERSION_NUMBER < 0x10100000
 	SSL_CTX_set_tmp_rsa_callback( ctx, tlso_tmp_rsa_cb );
 #endif
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	if ( lo->ldo_tls_crlcheck ) {
 		X509_STORE *x509_s = SSL_CTX_get_cert_store( ctx );
 		if ( lo->ldo_tls_crlcheck == LDAP_OPT_X_TLS_CRL_PEER ) {
@@ -553,13 +593,25 @@ tlso_session_my_dn( tls_session *sess, struct berval *der_dn )
 	tlso_session *s = (tlso_session *)sess;
 	X509 *x;
 	X509_NAME *xn;
+#ifdef HAVE_WOLFSSL
+	int ret;
+	unsigned char *der_buf = NULL;
+#endif
 
 	x = SSL_get_certificate( s );
 
 	if (!x) return LDAP_INVALID_CREDENTIALS;
 	
 	xn = X509_get_subject_name(x);
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+#ifdef HAVE_WOLFSSL
+	/* der_buf is dynamically allocated, so callers of this function will need
+	   to free der_dn->bv_val. */
+	ret = i2d_X509_NAME(xn, &der_buf);
+	if (ret < 0)
+		return LDAP_INVALID_CREDENTIALS;
+	der_dn->bv_len = ret;
+	der_dn->bv_val = der_buf;
+#elif OPENSSL_VERSION_NUMBER < 0x10100000
 	der_dn->bv_len = i2d_X509_NAME( xn, NULL );
 	der_dn->bv_val = xn->bytes->data;
 #else
@@ -590,12 +642,24 @@ tlso_session_peer_dn( tls_session *sess, struct berval *der_dn )
 	tlso_session *s = (tlso_session *)sess;
 	X509 *x = tlso_get_cert( s );
 	X509_NAME *xn;
+#ifdef HAVE_WOLFSSL
+	unsigned char *der_buf = NULL;
+	int ret;
+#endif
 
 	if ( !x )
 		return LDAP_INVALID_CREDENTIALS;
 
 	xn = X509_get_subject_name(x);
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+#ifdef HAVE_WOLFSSL
+	/* der_buf is dynamically allocated, so callers of this function will need
+	   to free der_dn->bv_val. */
+	ret = i2d_X509_NAME(xn, &der_buf);
+	if (ret < 0)
+		return LDAP_INVALID_CREDENTIALS;
+	der_dn->bv_len = ret;
+	der_dn->bv_val = der_buf;
+#elif OPENSSL_VERSION_NUMBER < 0x10100000
 	der_dn->bv_len = i2d_X509_NAME( xn, NULL );
 	der_dn->bv_val = xn->bytes->data;
 #else
@@ -855,7 +919,7 @@ struct tls_data {
 	Sockbuf_IO_Desc		*sbiod;
 };
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+#if OPENSSL_VERSION_NUMBER < 0x10100000 && !defined(HAVE_WOLFSSL)
 #define BIO_set_init(b, x)	b->init = x
 #define BIO_set_data(b, x)	b->ptr = x
 #define BIO_clear_flags(b, x)	b->flags &= ~(x)
@@ -1375,4 +1439,4 @@ tls_impl ldap_int_tls_impl = {
 	0
 };
 
-#endif /* HAVE_OPENSSL */
+#endif /* HAVE_OPENSSL || HAVE_WOLFSSL */
diff --git a/servers/slapd/bconfig.c b/servers/slapd/bconfig.c
index 3188ccf..f55a2bc 100644
--- a/servers/slapd/bconfig.c
+++ b/servers/slapd/bconfig.c
@@ -699,7 +699,7 @@ static ConfigTable config_back_cf_table[] = {
 		"( OLcfgGlAt:72 NAME 'olcTLSCipherSuite' "
 			"SYNTAX OMsDirectoryString SINGLE-VALUE )", NULL, NULL },
 	{ "TLSCRLCheck", NULL, 2, 2, 0,
-#if defined(HAVE_TLS) && defined(HAVE_OPENSSL_CRL)
+#if defined(HAVE_TLS) && (defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL))
 		CFG_TLS_CRLCHECK|ARG_STRING|ARG_MAGIC, &config_tls_config,
 #else
 		ARG_IGNORED, NULL,
diff --git a/servers/slapd/config.c b/servers/slapd/config.c
index bd68a24..9b4b6fb 100644
--- a/servers/slapd/config.c
+++ b/servers/slapd/config.c
@@ -1432,7 +1432,7 @@ static slap_cf_aux_table bindkey[] = {
 	{ BER_BVC("tls_cipher_suite="), offsetof(slap_bindconf, sb_tls_cipher_suite), 's', 0, NULL },
 	{ BER_BVC("tls_protocol_min="), offsetof(slap_bindconf, sb_tls_protocol_min), 's', 0, NULL },
 	{ BER_BVC("tls_ecname="), offsetof(slap_bindconf, sb_tls_ecname), 's', 0, NULL },
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	{ BER_BVC("tls_crlcheck="), offsetof(slap_bindconf, sb_tls_crlcheck), 's', 0, NULL },
 #endif
 #endif
@@ -1813,7 +1813,7 @@ void bindconf_free( slap_bindconf *bc ) {
 		ch_free( bc->sb_tls_ecname );
 		bc->sb_tls_ecname = NULL;
 	}
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	if ( bc->sb_tls_crlcheck ) {
 		ch_free( bc->sb_tls_crlcheck );
 		bc->sb_tls_crlcheck = NULL;
@@ -1929,7 +1929,7 @@ int bindconf_tls_set( slap_bindconf *bc, LDAP *ld )
 		} else
 			newctx = 1;
 	}
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	if ( bc->sb_tls_crlcheck ) {
 		rc = ldap_int_tls_config( ld, LDAP_OPT_X_TLS_CRLCHECK,
 			bc->sb_tls_crlcheck );
diff --git a/servers/slapd/slap.h b/servers/slapd/slap.h
index 7581967..251efc9 100644
--- a/servers/slapd/slap.h
+++ b/servers/slapd/slap.h
@@ -1643,7 +1643,7 @@ typedef struct slap_bindconf {
 	char *sb_tls_cipher_suite;
 	char *sb_tls_protocol_min;
 	char *sb_tls_ecname;
-#ifdef HAVE_OPENSSL_CRL
+#if defined(HAVE_OPENSSL_CRL) || defined(HAVE_WOLFSSL)
 	char *sb_tls_crlcheck;
 #endif
 	int sb_tls_do_init;
