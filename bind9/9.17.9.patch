From a89e24db5431e168e821d8484903de563e1117de Mon Sep 17 00:00:00 2001
From: Juliusz Sosinowicz <juliusz@wolfssl.com>
Date: Fri, 21 May 2021 16:57:48 +0200
Subject: [PATCH] Patch for wolfSSL

This patch was implemented and tested on commit 66fc6c5a9e32c9535a700cd6de5689d1ace1e4f0 of the master bind9 branch

- `--with-wolfssl` configure option added. Uses `PKG_CHECK_MODULES` and `PKG_CHECK_VAR` to find the install location of the wolfSSL module.
- `FATAL_ERROR` changed to `BIND_FATAL_ERROR` to avoid collision with wolfSSL `FATAL_ERROR`.
- `BN_GENCB_*` not supported so uses are macro'd out.
- `DH` structure doesn't use flags.
- ECC `NID_*` are not defines so don't try to check for them with preprocessor.
- Compatibility layer does not support using an engine.
- `ssl_ctx_st` equivalent is `WOLFSSL_CTX`.
- `SSL_METHOD *method` needs to be non-const.

Compile wolfSSL with:
```
./autogen.sh
./configure --enable-bind
make
make install
```

Compile bind with
```
patch -p1 < <path/to/this/patch>
autoreconf -ivf
./configure --with-wolfssl
make
```

bind9 should pass all tests run with:
```
make check
```
If any tests fail, please first try compiling with OpenSSL to check if your system is correctly configured to run tests.

Signed-off-by: Juliusz Sosinowicz <juliusz@wolfssl.com>
---
 configure.ac                 | 65 ++++++++++++++++++++++++++++++++++++
 doc/dev/unexpected           |  2 +-
 doc/misc/options             |  4 +--
 doc/misc/options.active      |  4 +--
 lib/dns/dst_openssl.h        |  4 +++
 lib/dns/name.c               | 10 +++---
 lib/dns/openssl_link.c       |  2 +-
 lib/dns/openssldh_link.c     | 23 +++++++++++++
 lib/dns/opensslecdsa_link.c  |  6 +++-
 lib/dns/opensslrsa_link.c    | 25 ++++++++++++++
 lib/dns/rbtdb.c              |  2 +-
 lib/dns/rpz.c                |  2 +-
 lib/isc/entropy.c            |  2 +-
 lib/isc/include/isc/netmgr.h |  4 +++
 lib/isc/include/isc/util.h   |  2 +-
 lib/isc/lex.c                |  2 +-
 lib/isc/netmgr/tls.c         |  5 ++-
 lib/isc/sockaddr.c           |  6 ++--
 lib/isc/unix/socket.c        |  6 ++--
 lib/isc/win32/socket.c       | 14 ++++----
 20 files changed, 159 insertions(+), 31 deletions(-)

diff --git a/configure.ac b/configure.ac
index 154e023212..5cbc379846 100644
--- a/configure.ac
+++ b/configure.ac
@@ -612,6 +612,69 @@ AS_IF([test "$enable_pthread_rwlock" = "yes"],
 
 CRYPTO=OpenSSL
 
+AC_ARG_WITH([wolfssl], 
+	      [AS_HELP_STRING([--with-wolfssl],
+	      		[Use wolfSSL TLS [default=no]])],
+	      [], [])
+
+if test "$with_wolfssl" = "yes"; then
+
+	#
+	# wolfSSL is mandatory
+	#
+	PKG_CHECK_MODULES(
+		[WOLFSSL],
+		[wolfssl],
+		[],
+		[AC_MSG_ERROR([Could not find wolfSSL.])]
+	)
+	PKG_CHECK_VAR(
+		[WOLFSSL_INCLUDEDIR],
+		[wolfssl],
+		[includedir],
+		[],
+		[AC_MSG_ERROR([Could not find wolfSSL includedir variable.])]
+	)
+	WOLFSSL_CFLAGS="${WOLFSSL_CFLAGS} -I${WOLFSSL_INCLUDEDIR}/wolfssl"
+
+	OPENSSL_CFLAGS="$WOLFSSL_CFLAGS"
+	OPENSSL_LIBS="$WOLFSSL_LIBS"
+	CFLAGS="$CFLAGS $WOLFSSL_CFLAGS"
+	LIBS="$LIBS $WOLFSSL_LIBS"
+	
+	AC_DEFINE([HAVE_WOLFSSL], [1], [Use the wolfSSL TLS library])
+	AC_DEFINE([EXTERNAL_OPTS_OPENVPN], [1], [Instruct wolfSSL to self include the options header])
+	
+	#
+	# Building wolfSSL with --enable-bind takes care of making 
+	# everything necessary available.
+	#
+	
+	AC_DEFINE([HAVE_ECDSA_SIGN], [1], [])
+	AC_DEFINE([HAVE_ECDSA_VERIFY], [1], [])
+	AC_DEFINE([HAVE_EVP_AES_128_ECB], [1], [])
+	AC_DEFINE([HAVE_EVP_AES_192_ECB], [1], [])
+	AC_DEFINE([HAVE_EVP_AES_256_ECB], [1], [])
+	AC_DEFINE([HAVE_EVP_CIPHER_CTX_FREE], [1], [])
+	AC_DEFINE([HAVE_EVP_CIPHER_CTX_NEW], [1], [])
+	AC_DEFINE([HAVE_EVP_MD_CTX_RESET], [1], [])
+	AC_DEFINE([HAVE_EVP_MD_CTX_FREE], [1], [])
+	AC_DEFINE([HAVE_EVP_MD_CTX_NEW], [1], [])
+	AC_DEFINE([HAVE_EVP_SHA1], [1], [])
+	AC_DEFINE([HAVE_EVP_SHA224], [1], [])
+	AC_DEFINE([HAVE_EVP_SHA256], [1], [])
+	AC_DEFINE([HAVE_EVP_SHA384], [1], [])
+	AC_DEFINE([HAVE_EVP_SHA512], [1], [])
+	AC_DEFINE([HAVE_RSA_SET0_KEY], [1], [])
+	AC_DEFINE([HAVE_TLS_SERVER_METHOD], [1], [])
+	AC_DEFINE([HAVE_HMAC_CTX_NEW], [1], [])
+	AC_DEFINE([HAVE_HMAC_CTX_FREE], [1], [])
+	AC_DEFINE([HAVE_HMAC_CTX_RESET], [1], [])
+	AC_DEFINE([HAVE_HMAC_CTX_GET_MD], [1], [])
+	AC_DEFINE([HAVE_DH_GET0_KEY], [1], [])
+
+else
+
 #
 # OpenSSL/LibreSSL is mandatory
 #
@@ -708,6 +771,8 @@ AC_CHECK_FUNCS([DH_get0_key ECDSA_SIG_get0 RSA_set0_key])
 
 AC_CHECK_FUNCS([TLS_server_method])
 
+fi
+
 #
 # Check whether FIPS mode is available and whether we should enable it
 #
diff --git a/doc/dev/unexpected b/doc/dev/unexpected
index 2c6de4546a..70a61a8710 100644
--- a/doc/dev/unexpected
+++ b/doc/dev/unexpected
@@ -44,4 +44,4 @@ scheme.
 
 In the (rare) situation where a library routine encounters a fatal error and
 has no way of reporting the error to the application, the library may call
-FATAL_ERROR().  This will log the problem and then terminate the application.
+BIND_FATAL_ERROR().  This will log the problem and then terminate the application.
diff --git a/doc/misc/options b/doc/misc/options
index eac0be785a..27ae75aa8d 100644
--- a/doc/misc/options
+++ b/doc/misc/options
@@ -229,7 +229,7 @@ options {
         listen-on-v6 [ port <integer> ] [ dscp
             <integer> ] [ tls <string> ] {
             <address_match_element>; ... }; // may occur multiple times
-        lmdb-mapsize <sizeval>;
+        lmdb-mapsize <sizeval>; // non-operational
         lock-file ( <quoted_string> | none );
         maintain-ixfr-base <boolean>; // ancient
         managed-keys-directory <quoted_string>;
@@ -603,7 +603,7 @@ view <string> [ <class> ] {
         }; // may occur multiple times
         key-directory <quoted_string>;
         lame-ttl <duration>;
-        lmdb-mapsize <sizeval>;
+        lmdb-mapsize <sizeval>; // non-operational
         maintain-ixfr-base <boolean>; // ancient
         managed-keys { <string> (
             static-key | initial-key
diff --git a/doc/misc/options.active b/doc/misc/options.active
index b418af3c39..fd89464365 100644
--- a/doc/misc/options.active
+++ b/doc/misc/options.active
@@ -206,7 +206,7 @@ options {
         listen-on-v6 [ port <integer> ] [ dscp
             <integer> ] [ tls <string> ] {
             <address_match_element>; ... }; // may occur multiple times
-        lmdb-mapsize <sizeval>;
+        lmdb-mapsize <sizeval>; // non-operational
         lock-file ( <quoted_string> | none );
         managed-keys-directory <quoted_string>;
         masterfile-format ( map | raw | text );
@@ -543,7 +543,7 @@ view <string> [ <class> ] {
         }; // may occur multiple times
         key-directory <quoted_string>;
         lame-ttl <duration>;
-        lmdb-mapsize <sizeval>;
+        lmdb-mapsize <sizeval>; // non-operational
         managed-keys { <string> (
             static-key | initial-key
             | static-ds | initial-ds
diff --git a/lib/dns/dst_openssl.h b/lib/dns/dst_openssl.h
index 34b06d4e02..ab3a7ea763 100644
--- a/lib/dns/dst_openssl.h
+++ b/lib/dns/dst_openssl.h
@@ -34,7 +34,11 @@
  */
 #define BN_GENCB_free(x)    ((void)0)
 #define BN_GENCB_new()	    (&_cb)
+#ifndef HAVE_WOLFSSL
 #define BN_GENCB_get_arg(x) ((x)->arg)
+#else
+#define BN_GENCB_get_arg(x) (NULL)
+#endif
 #endif /* if OPENSSL_VERSION_NUMBER < 0x10100000L || \
 	* defined(LIBRESSL_VERSION_NUMBER) */
 
diff --git a/lib/dns/name.c b/lib/dns/name.c
index 42ed549a11..78798b4837 100644
--- a/lib/dns/name.c
+++ b/lib/dns/name.c
@@ -1248,7 +1248,7 @@ dns_name_fromtext(dns_name_t *name, isc_buffer_t *source,
 			}
 			break;
 		default:
-			FATAL_ERROR(__FILE__, __LINE__, "Unexpected state %d",
+			BIND_FATAL_ERROR(__FILE__, __LINE__, "Unexpected state %d",
 				    state);
 			/* Does not return. */
 		}
@@ -1470,7 +1470,7 @@ dns_name_totext2(const dns_name_t *name, unsigned int options,
 				count--;
 			}
 		} else {
-			FATAL_ERROR(__FILE__, __LINE__,
+			BIND_FATAL_ERROR(__FILE__, __LINE__,
 				    "Unexpected label type %02x", count);
 			/* NOTREACHED */
 		}
@@ -1594,7 +1594,7 @@ dns_name_tofilenametext(const dns_name_t *name, bool omit_final_dot,
 				count--;
 			}
 		} else {
-			FATAL_ERROR(__FILE__, __LINE__,
+			BIND_FATAL_ERROR(__FILE__, __LINE__,
 				    "Unexpected label type %02x", count);
 			/* NOTREACHED */
 		}
@@ -1677,7 +1677,7 @@ dns_name_downcase(const dns_name_t *source, dns_name_t *name,
 				count--;
 			}
 		} else {
-			FATAL_ERROR(__FILE__, __LINE__,
+			BIND_FATAL_ERROR(__FILE__, __LINE__,
 				    "Unexpected label type %02x", count);
 			/* Does not return. */
 		}
@@ -1888,7 +1888,7 @@ dns_name_fromwire(dns_name_t *name, isc_buffer_t *source,
 			state = fw_start;
 			break;
 		default:
-			FATAL_ERROR(__FILE__, __LINE__, "Unknown state %d",
+			BIND_FATAL_ERROR(__FILE__, __LINE__, "Unknown state %d",
 				    state);
 			/* Does not return. */
 		}
diff --git a/lib/dns/openssl_link.c b/lib/dns/openssl_link.c
index 5ba79569e6..77bbccf276 100644
--- a/lib/dns/openssl_link.c
+++ b/lib/dns/openssl_link.c
@@ -163,7 +163,7 @@ dst__openssl_init(isc_mem_t *mctx, const char *engine) {
 
 	/* Protect ourselves against unseeded PRNG */
 	if (RAND_status() != 1) {
-		FATAL_ERROR(__FILE__, __LINE__,
+		BIND_FATAL_ERROR(__FILE__, __LINE__,
 			    "OpenSSL pseudorandom number generator "
 			    "cannot be initialized (see the `PRNG not "
 			    "seeded' message in the OpenSSL FAQ)");
diff --git a/lib/dns/openssldh_link.c b/lib/dns/openssldh_link.c
index 72b8209366..f0d9b05991 100644
--- a/lib/dns/openssldh_link.c
+++ b/lib/dns/openssldh_link.c
@@ -239,6 +239,7 @@ openssldh_paramcompare(const dst_key_t *key1, const dst_key_t *key2) {
 	return (true);
 }
 
+#ifndef HAVE_WOLFSSL
 static int
 progress_cb(int p, int n, BN_GENCB *cb) {
 	union {
@@ -254,10 +255,12 @@ progress_cb(int p, int n, BN_GENCB *cb) {
 	}
 	return (1);
 }
+#endif
 
 static isc_result_t
 openssldh_generate(dst_key_t *key, int generator, void (*callback)(int)) {
 	DH *dh = NULL;
+#ifndef HAVE_WOLFSSL
 	BN_GENCB *cb;
 #if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 	BN_GENCB _cb;
@@ -267,6 +270,10 @@ openssldh_generate(dst_key_t *key, int generator, void (*callback)(int)) {
 		void *dptr;
 		void (*fptr)(int);
 	} u;
+#else
+
+	(void)callback;
+#endif
 
 	if (generator == 0) {
 		if (key->key_size == 768 || key->key_size == 1024 ||
@@ -304,7 +311,9 @@ openssldh_generate(dst_key_t *key, int generator, void (*callback)(int)) {
 		if (dh == NULL) {
 			return (dst__openssl_toresult(ISC_R_NOMEMORY));
 		}
+#ifndef HAVE_WOLFSSL
 		cb = BN_GENCB_new();
+#endif
 #if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 		if (cb == NULL) {
 			DH_free(dh);
@@ -312,15 +321,21 @@ openssldh_generate(dst_key_t *key, int generator, void (*callback)(int)) {
 		}
 #endif /* if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
 	* !defined(LIBRESSL_VERSION_NUMBER) */
+#ifndef HAVE_WOLFSSL
 		if (callback == NULL) {
 			BN_GENCB_set_old(cb, NULL, NULL);
 		} else {
 			u.fptr = callback;
 			BN_GENCB_set(cb, progress_cb, u.dptr);
 		}
+#endif
 
 		if (!DH_generate_parameters_ex(dh, key->key_size, generator,
+#ifndef HAVE_WOLFSSL
 					       cb)) {
+#else
+					       NULL)) {
+#endif
 			DH_free(dh);
 			BN_GENCB_free(cb);
 			return (dst__openssl_toresult2("DH_generate_parameters_"
@@ -328,7 +343,9 @@ openssldh_generate(dst_key_t *key, int generator, void (*callback)(int)) {
 						       DST_R_OPENSSLFAILURE));
 		}
 		BN_GENCB_free(cb);
+#ifndef HAVE_WOLFSSL
 		cb = NULL;
+#endif
 	}
 
 	if (DH_generate_key(dh) == 0) {
@@ -336,7 +353,9 @@ openssldh_generate(dst_key_t *key, int generator, void (*callback)(int)) {
 		return (dst__openssl_toresult2("DH_generate_key",
 					       DST_R_OPENSSLFAILURE));
 	}
+#ifndef HAVE_WOLFSSL
 	DH_clear_flags(dh, DH_FLAG_CACHE_MONT_P);
+#endif
 	key->keydata.dh = dh;
 
 	return (ISC_R_SUCCESS);
@@ -461,7 +480,9 @@ openssldh_fromdns(dst_key_t *key, isc_buffer_t *data) {
 	if (dh == NULL) {
 		return (dst__openssl_toresult(ISC_R_NOMEMORY));
 	}
+#ifndef HAVE_WOLFSSL
 	DH_clear_flags(dh, DH_FLAG_CACHE_MONT_P);
+#endif
 
 	/*
 	 * Read the prime length.  1 & 2 are table entries, > 16 means a
@@ -682,7 +703,9 @@ openssldh_parse(dst_key_t *key, isc_lex_t *lexer, dst_key_t *pub) {
 	if (dh == NULL) {
 		DST_RET(ISC_R_NOMEMORY);
 	}
+#ifndef HAVE_WOLFSSL
 	DH_clear_flags(dh, DH_FLAG_CACHE_MONT_P);
+#endif
 	key->keydata.dh = dh;
 
 	for (i = 0; i < priv.nelements; i++) {
diff --git a/lib/dns/opensslecdsa_link.c b/lib/dns/opensslecdsa_link.c
index dd3c1bbf66..544021e049 100644
--- a/lib/dns/opensslecdsa_link.c
+++ b/lib/dns/opensslecdsa_link.c
@@ -34,12 +34,14 @@
 #include "dst_openssl.h"
 #include "dst_parse.h"
 
+#ifndef HAVE_WOLFSSL
 #ifndef NID_X9_62_prime256v1
 #error "P-256 group is not known (NID_X9_62_prime256v1)"
 #endif /* ifndef NID_X9_62_prime256v1 */
 #ifndef NID_secp384r1
 #error "P-384 group is not known (NID_secp384r1)"
 #endif /* ifndef NID_secp384r1 */
+#endif
 
 #define DST_RET(a)        \
 	{                 \
@@ -550,10 +552,10 @@ opensslecdsa_tofile(const dst_key_t *key, const char *directory) {
 	ret = dst__privstruct_writefile(key, &priv, directory);
 
 err:
-	EC_KEY_free(eckey);
 	if (buf != NULL) {
 		isc_mem_put(key->mctx, buf, BN_num_bytes(privkey));
 	}
+	EC_KEY_free(eckey);
 	return (ret);
 }
 
@@ -672,6 +674,7 @@ load_privkey_from_engine(EC_KEY *eckey, const char *engine, const char *label) {
 	return (ISC_R_SUCCESS);
 }
 #else
+#ifndef HAVE_WOLFSSL
 static isc_result_t
 load_pubkey_from_engine(EC_KEY *eckey, const char *engine, const char *label) {
 	UNUSED(eckey);
@@ -680,6 +683,7 @@ load_pubkey_from_engine(EC_KEY *eckey, const char *engine, const char *label) {
 
 	return (DST_R_NOENGINE);
 }
+#endif
 
 static isc_result_t
 load_privkey_from_engine(EC_KEY *eckey, const char *engine, const char *label) {
diff --git a/lib/dns/opensslrsa_link.c b/lib/dns/opensslrsa_link.c
index 08be43d3fe..6fdc80ef35 100644
--- a/lib/dns/opensslrsa_link.c
+++ b/lib/dns/opensslrsa_link.c
@@ -426,6 +426,7 @@ opensslrsa_compare(const dst_key_t *key1, const dst_key_t *key2) {
 	return (true);
 }
 
+#ifndef HAVE_WOLFSSL
 static int
 progress_cb(int p, int n, BN_GENCB *cb) {
 	union {
@@ -441,6 +442,7 @@ progress_cb(int p, int n, BN_GENCB *cb) {
 	}
 	return (1);
 }
+#endif
 
 static isc_result_t
 opensslrsa_generate(dst_key_t *key, int exp, void (*callback)(int)) {
@@ -451,11 +453,16 @@ opensslrsa_generate(dst_key_t *key, int exp, void (*callback)(int)) {
 	} u;
 	RSA *rsa = RSA_new();
 	BIGNUM *e = BN_new();
+#ifndef HAVE_WOLFSSL
 #if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 	BN_GENCB _cb;
 #endif /* if OPENSSL_VERSION_NUMBER < 0x10100000L || \
 	* defined(LIBRESSL_VERSION_NUMBER) */
 	BN_GENCB *cb = BN_GENCB_new();
+#else
+	UNUSED(callback);
+	UNUSED(u);
+#endif
 	EVP_PKEY *pkey = EVP_PKEY_new();
 
 	/*
@@ -486,7 +493,11 @@ opensslrsa_generate(dst_key_t *key, int exp, void (*callback)(int)) {
 		ISC_UNREACHABLE();
 	}
 
+#ifndef HAVE_WOLFSSL
 	if (rsa == NULL || e == NULL || cb == NULL) {
+#else
+	if (rsa == NULL || e == NULL) {
+#endif
 		goto err;
 	}
 	if (pkey == NULL) {
@@ -506,6 +517,7 @@ opensslrsa_generate(dst_key_t *key, int exp, void (*callback)(int)) {
 		BN_set_bit(e, 32);
 	}
 
+#ifndef HAVE_WOLFSSL
 	if (callback == NULL) {
 		BN_GENCB_set_old(cb, NULL, NULL);
 	} else {
@@ -514,9 +526,14 @@ opensslrsa_generate(dst_key_t *key, int exp, void (*callback)(int)) {
 	}
 
 	if (RSA_generate_key_ex(rsa, key->key_size, e, cb)) {
+#else
+	if (RSA_generate_key_ex(rsa, key->key_size, e, NULL)) {
+#endif
 		BN_free(e);
+#ifndef HAVE_WOLFSSL
 		BN_GENCB_free(cb);
 		cb = NULL;
+#endif
 		key->keydata.pkey = pkey;
 
 		RSA_free(rsa);
@@ -538,10 +555,12 @@ err:
 		RSA_free(rsa);
 		rsa = NULL;
 	}
+#ifndef HAVE_WOLFSSL
 	if (cb != NULL) {
 		BN_GENCB_free(cb);
 		cb = NULL;
 	}
+#endif
 	return (dst__openssl_toresult(ret));
 }
 
@@ -875,7 +894,11 @@ opensslrsa_parse(dst_key_t *key, isc_lex_t *lexer, dst_key_t *pub) {
 	const BIGNUM *ex = NULL;
 #endif /* if !defined(OPENSSL_NO_ENGINE) */
 	isc_mem_t *mctx = key->mctx;
+#ifndef HAVE_WOLFSSL
 	const char *engine = NULL, *label = NULL;
+#else
+	const char *label = NULL;
+#endif
 	EVP_PKEY *pkey = NULL;
 	BIGNUM *n = NULL, *e = NULL, *d = NULL;
 	BIGNUM *p = NULL, *q = NULL;
@@ -908,9 +931,11 @@ opensslrsa_parse(dst_key_t *key, isc_lex_t *lexer, dst_key_t *pub) {
 
 	for (i = 0; i < priv.nelements; i++) {
 		switch (priv.elements[i].tag) {
+#ifndef HAVE_WOLFSSL
 		case TAG_RSA_ENGINE:
 			engine = (char *)priv.elements[i].data;
 			break;
+#endif
 		case TAG_RSA_LABEL:
 			label = (char *)priv.elements[i].data;
 			break;
diff --git a/lib/dns/rbtdb.c b/lib/dns/rbtdb.c
index b9a46cea40..b2a45d9b32 100644
--- a/lib/dns/rbtdb.c
+++ b/lib/dns/rbtdb.c
@@ -4532,7 +4532,7 @@ zone_findzonecut(dns_db_t *db, const dns_name_t *name, unsigned int options,
 	UNUSED(rdataset);
 	UNUSED(sigrdataset);
 
-	FATAL_ERROR(__FILE__, __LINE__, "zone_findzonecut() called!");
+	BIND_FATAL_ERROR(__FILE__, __LINE__, "zone_findzonecut() called!");
 
 	/* NOTREACHED */
 	return (ISC_R_NOTIMPLEMENTED);
diff --git a/lib/dns/rpz.c b/lib/dns/rpz.c
index 6c02fe5a8d..9504d63dac 100644
--- a/lib/dns/rpz.c
+++ b/lib/dns/rpz.c
@@ -211,7 +211,7 @@ dns_rpz_type2str(dns_rpz_type_t type) {
 	case DNS_RPZ_TYPE_BAD:
 		break;
 	}
-	FATAL_ERROR(__FILE__, __LINE__, "impossible rpz type %d", type);
+	BIND_FATAL_ERROR(__FILE__, __LINE__, "impossible rpz type %d", type);
 	return ("impossible");
 }
 
diff --git a/lib/isc/entropy.c b/lib/isc/entropy.c
index b31528a895..5738940604 100644
--- a/lib/isc/entropy.c
+++ b/lib/isc/entropy.c
@@ -20,7 +20,7 @@
 void
 isc_entropy_get(void *buf, size_t buflen) {
 	if (RAND_bytes(buf, buflen) < 1) {
-		FATAL_ERROR(__FILE__, __LINE__, "RAND_bytes(): %s",
+		BIND_FATAL_ERROR(__FILE__, __LINE__, "RAND_bytes(): %s",
 			    ERR_error_string(ERR_get_error(), NULL));
 	}
 }
diff --git a/lib/isc/include/isc/netmgr.h b/lib/isc/include/isc/netmgr.h
index 7bb21b48e4..7d46f72976 100644
--- a/lib/isc/include/isc/netmgr.h
+++ b/lib/isc/include/isc/netmgr.h
@@ -16,7 +16,11 @@
 #include <isc/result.h>
 #include <isc/types.h>
 
+#ifdef HAVE_WOLFSSL
+typedef struct WOLFSSL_CTX isc_ssl_ctx_t;
+#else
 typedef struct ssl_ctx_st isc_ssl_ctx_t;
+#endif
 
 /*
  * Replacement for isc_sockettype_t provided by socket.h.
diff --git a/lib/isc/include/isc/util.h b/lib/isc/include/isc/util.h
index 8941ec125e..38c3afd788 100644
--- a/lib/isc/include/isc/util.h
+++ b/lib/isc/include/isc/util.h
@@ -304,7 +304,7 @@ mock_assert(const int result, const char *const expression,
 /*% Unexpected Error */
 #define UNEXPECTED_ERROR isc_error_unexpected
 /*% Fatal Error */
-#define FATAL_ERROR isc_error_fatal
+#define BIND_FATAL_ERROR isc_error_fatal
 
 #ifdef UNIT_TESTING
 
diff --git a/lib/isc/lex.c b/lib/isc/lex.c
index 3aef691694..86075e1549 100644
--- a/lib/isc/lex.c
+++ b/lib/isc/lex.c
@@ -854,7 +854,7 @@ isc_lex_gettoken(isc_lex_t *lex, unsigned int options, isc_token_t *tokenp) {
 			remaining--;
 			break;
 		default:
-			FATAL_ERROR(__FILE__, __LINE__, "Unexpected state %d",
+			BIND_FATAL_ERROR(__FILE__, __LINE__, "Unexpected state %d",
 				    state);
 		}
 	} while (!done);
diff --git a/lib/isc/netmgr/tls.c b/lib/isc/netmgr/tls.c
index f685493f38..ba68797984 100644
--- a/lib/isc/netmgr/tls.c
+++ b/lib/isc/netmgr/tls.c
@@ -779,11 +779,14 @@ isc_nm_tls_create_server_ctx(const char *keyfile, const char *certfile,
 		INSIST(keyfile != NULL);
 		INSIST(certfile != NULL);
 	}
-
+#ifdef HAVE_WOLFSSL
+	SSL_METHOD *method = TLS_server_method();
+#else
 #ifdef HAVE_TLS_SERVER_METHOD
 	const SSL_METHOD *method = TLS_server_method();
 #else
 	const SSL_METHOD *method = SSLv23_server_method();
+#endif
 #endif
 
 	SSL_CTX *ctx = SSL_CTX_new(method);
diff --git a/lib/isc/sockaddr.c b/lib/isc/sockaddr.c
index dbd1c10d79..c3ff4048ea 100644
--- a/lib/isc/sockaddr.c
+++ b/lib/isc/sockaddr.c
@@ -345,7 +345,7 @@ isc_sockaddr_pf(const isc_sockaddr_t *sockaddr) {
 	case AF_INET6:
 		return (PF_INET6);
 	default:
-		FATAL_ERROR(__FILE__, __LINE__, "unknown address family: %d",
+		BIND_FATAL_ERROR(__FILE__, __LINE__, "unknown address family: %d",
 			    (int)sockaddr->type.sa.sa_family);
 	}
 #endif /* if (AF_INET == PF_INET && AF_INET6 == PF_INET6) */
@@ -385,7 +385,7 @@ isc_sockaddr_setport(isc_sockaddr_t *sockaddr, in_port_t port) {
 		sockaddr->type.sin6.sin6_port = htons(port);
 		break;
 	default:
-		FATAL_ERROR(__FILE__, __LINE__, "unknown address family: %d",
+		BIND_FATAL_ERROR(__FILE__, __LINE__, "unknown address family: %d",
 			    (int)sockaddr->type.sa.sa_family);
 	}
 }
@@ -402,7 +402,7 @@ isc_sockaddr_getport(const isc_sockaddr_t *sockaddr) {
 		port = ntohs(sockaddr->type.sin6.sin6_port);
 		break;
 	default:
-		FATAL_ERROR(__FILE__, __LINE__, "unknown address family: %d",
+		BIND_FATAL_ERROR(__FILE__, __LINE__, "unknown address family: %d",
 			    (int)sockaddr->type.sa.sa_family);
 	}
 
diff --git a/lib/isc/unix/socket.c b/lib/isc/unix/socket.c
index 6f02dd0141..622213e313 100644
--- a/lib/isc/unix/socket.c
+++ b/lib/isc/unix/socket.c
@@ -948,7 +948,7 @@ select_poke(isc__socketmgr_t *mgr, int threadid, int fd, int msg) {
 
 	if (cc < 0) {
 		strerror_r(errno, strbuf, sizeof(strbuf));
-		FATAL_ERROR(__FILE__, __LINE__,
+		BIND_FATAL_ERROR(__FILE__, __LINE__,
 			    "write() failed during watcher poke: %s", strbuf);
 	}
 
@@ -973,7 +973,7 @@ select_readmsg(isc__socketthread_t *thread, int *fd, int *msg) {
 		}
 
 		strerror_r(errno, strbuf, sizeof(strbuf));
-		FATAL_ERROR(__FILE__, __LINE__,
+		BIND_FATAL_ERROR(__FILE__, __LINE__,
 			    "read() failed during watcher poke: %s", strbuf);
 	}
 	INSIST(cc == sizeof(buf));
@@ -3469,7 +3469,7 @@ netthread(void *uap) {
 
 			if (cc < 0 && !SOFT_ERROR(errno)) {
 				strerror_r(errno, strbuf, sizeof(strbuf));
-				FATAL_ERROR(__FILE__, __LINE__, "%s failed: %s",
+				BIND_FATAL_ERROR(__FILE__, __LINE__, "%s failed: %s",
 					    fnname, strbuf);
 			}
 
diff --git a/lib/isc/win32/socket.c b/lib/isc/win32/socket.c
index 42d345cd82..e6eeab168a 100644
--- a/lib/isc/win32/socket.c
+++ b/lib/isc/win32/socket.c
@@ -478,7 +478,7 @@ signal_iocompletionport_exit(isc_socketmgr_t *manager) {
 						0, 0)) {
 			errval = GetLastError();
 			strerror_r(errval, strbuf, sizeof(strbuf));
-			FATAL_ERROR(__FILE__, __LINE__,
+			BIND_FATAL_ERROR(__FILE__, __LINE__,
 				    "Can't request service thread to exit: %s",
 				    strbuf);
 		}
@@ -506,7 +506,7 @@ iocompletionport_createthreads(int total_threads, isc_socketmgr_t *manager) {
 		if (manager->hIOCPThreads[i] == NULL) {
 			errval = GetLastError();
 			strerror_r(errval, strbuf, sizeof(strbuf));
-			FATAL_ERROR(__FILE__, __LINE__,
+			BIND_FATAL_ERROR(__FILE__, __LINE__,
 				    "Can't create IOCP thread: %s", strbuf);
 		}
 	}
@@ -529,7 +529,7 @@ iocompletionport_init(isc_socketmgr_t *manager) {
 	if (hHeapHandle == NULL) {
 		errval = GetLastError();
 		strerror_r(errval, strbuf, sizeof(strbuf));
-		FATAL_ERROR(__FILE__, __LINE__,
+		BIND_FATAL_ERROR(__FILE__, __LINE__,
 			    "HeapCreate() failed during initialization: %s",
 			    strbuf);
 	}
@@ -540,7 +540,7 @@ iocompletionport_init(isc_socketmgr_t *manager) {
 	if (manager->hIoCompletionPort == NULL) {
 		errval = GetLastError();
 		strerror_r(errval, strbuf, sizeof(strbuf));
-		FATAL_ERROR(__FILE__, __LINE__,
+		BIND_FATAL_ERROR(__FILE__, __LINE__,
 			    "CreateIoCompletionPort() failed during "
 			    "initialization: %s",
 			    strbuf);
@@ -580,7 +580,7 @@ iocompletionport_update(isc_socket_t *sock) {
 		 * This function should return errors to the caller, not
 		 * exit here.
 		 */
-		FATAL_ERROR(__FILE__, __LINE__,
+		BIND_FATAL_ERROR(__FILE__, __LINE__,
 			    "CreateIoCompletionPort() failed during "
 			    "initialization: %s",
 			    strbuf);
@@ -630,7 +630,7 @@ initialise(void) {
 	if (err != 0) {
 		char strbuf[ISC_STRERRORSIZE];
 		strerror_r(err, strbuf, sizeof(strbuf));
-		FATAL_ERROR(__FILE__, __LINE__, "WSAStartup() failed: %s",
+		BIND_FATAL_ERROR(__FILE__, __LINE__, "WSAStartup() failed: %s",
 			    strbuf);
 	}
 	/*
@@ -2379,7 +2379,7 @@ SocketIoThread(LPVOID ThreadContext) {
 			       THREAD_PRIORITY_ABOVE_NORMAL)) {
 		errval = GetLastError();
 		strerror_r(errval, strbuf, sizeof(strbuf));
-		FATAL_ERROR(__FILE__, __LINE__, "Can't set thread priority: %s",
+		BIND_FATAL_ERROR(__FILE__, __LINE__, "Can't set thread priority: %s",
 			    strbuf);
 	}
 
-- 
2.25.1

