1.0 Intro to lighttpd v.1.4.50 with wolfSSL

Lighttpd is a lightweight web server we have ported wolfSSL to. The goal of
this manual is to help the user get started with Lighttpd using the wolfSSL
library for SSL and TLS operations.

1.1 Current Status Notes

This release is based off Lighttpd 1.4.50 as of August 15, 2018, and includes
two security patches backported from lighttpd-1.4.51.

wolfSSL offers support based in the United States as well as
training! With our dual-licensing options, wolfSSL can provide you with the
solution that you need for your commercial application or open source project.

2.0 INSTALLATION

2.1 Dependencies

The lighttpd-1.4.50 with wolfSSL requires the wolfSSL library version 3.15.3 or
later.  Future releases of wolfSSL can be obtained from http://www.wolfssl.com.
By default, lighttpd and wolfSSL install their libraries in different locations,
making use of the `--prefix` option can help ensure your libarary files are in
the expected locations.

To build and install wolfSSL for use with Lighttpd run the following commands
from the root wolfSSL directory:
    ./autogen.sh (if cloned from a git repository)
    ./configure --enable-lighty --prefix=installLocation
    make
    sudo make install
    sudo ldconfig (may additionally be required on some unix systems)

More details and information about wolfSSL can be found in the wolfSSL Manual,
available in both PDF and HTML formats from the wolfSSL Documentation page.

2.2 Building Lighttpd

When building Lighttpd on Linux, or OS X, use the autoconf system.  To build
Lighttpd, run the following two commands from Lighttpd’s top level directory:
    ./autogen.sh
    ./configure --with-wolfssl=yes --prefix=installLocation/lib --without-bzip2
        --without-zlib --without-pcre
    make

The `--with-wolfssl` option defaults to installing the wolfSSL libraries in the
`/usr/local` directory. If the `--prefix` option is used, the libary location
will overwrite the default.

To install lighttpd, run the following command:
    sudo make install
    sudo ldconfig (may additionally be required on some unix systems)

By default, the Lighttpd library is installed in the /usr/local/lib directory.
If the `--prefix` option is used, the libary location will overwrite the
default.

3.0 EXAMPLE SERVER

Once you’ve installed Lighttpd and wolfSSL as explained in section 2, we’ve
provided a directory containing an example server setup: wolfStartUp in the
lighttpd root directory.  The directory contains the following:

    lighttpd.conf: a simple conf file that lighttpd will run.  It uses
    localhost, and the port 443. It should only work with https.

    server.pem: the server’s certificate (the client will need to authenticate
    the server).

    index.html: the index page which will be returned on an https GET. It says:
    "Congratulations!!!  You got Lighttpd with wolfSSL to run."  When you see
    this, you know you’re doing something right.

3.1  To run the lighttpd server: in the ./wolfStartUp directory enter
the following:

    sudo /usr/local/sbin/lighttpd -D -f lighttpd.conf

Successful output:  2015-07-17 14:01:52: (log.c.164) server started

3.2 Testing with the wolfSSL client program:

To run without verifying the server’s cert (in the wolfssl directory):
    ./examples/client/client -p 443 -g -d

This will send a GET request, and on success the contents of the index.html
should be displayed on the terminal (along with a lot of other stuff):
    Congratulations!!!  You got Lighttpd with wolfSSL to run.

To run and verify the server’s cert (in wolfssl directory):
    ./examples/client/client -p 443 -g -A /path/to/lighttpd/wolfStartUp/server.pem

On success, the same congratulatory output should be displayed.

Browser: in the browser type:
    https://127.0.0.1

Accept the complaints about unrecognized certs to see the page without server.
Page should show same congratulatory text as above.

3.3 Server Name Indication

Make sure and configure “server.name” in lighttpd.conf to match certificate common name (CN)

4.0 Debugging

To get debug messages from wolfSSL code you must configure with the 
`--enable-debug` option:
    ./configure  --enable-lighty  --enable-debug

To turn on the wolfSSL debugging the following must be added to lighttpd:
./src/server.c: main() before any wolfSSL functions are called:
    wolfSSL_Debugging_ON();

After you have done this, wolfSSL debug messages will be printed to stderr.

The following line in the lighttpd.conf will specify the lighttpd log file:
    server.errorlog = "./server_err.log"

Prior to the log being opened, log messages will be directed to stderr.

To use lighttpd logging the following function is called with a lighttpd
server *srv argument:
    log_error_write(srv, __FILE__, __LINE__, "ss", "", "desired message");

5.0 Certificates and Keys

It might be the case that the certificates are expired. You can regenerate the
PEM files by going into wolfSSL's `certs` directory and executing the following
commands: 

```
cp ca-cert.pem /path/to/wolfStartUp/ca-cert.pem
cp client-cert.pem /path/to/wolfStartUp/client-cert.pem
cat server-key.pem server-cert.pem > /path/to/wolfStartUp/server.pem
```

6.0 Experimenting with Post-Quantum Algorithms

6.1 Build liboqs, OpenQuantumSafe's OpenSSL Fork and lighttpd

See wolfSSL's INSTALL file for instructions on how to build and install liboqs
and OpenQuantumSafe's OpenSSL fork. Also perform the steps for generating the
FALCON certificate chain. For building wolfSSL, it is the same instructions as
in section 2.1 above, but add `--with-liboqs` to the configure command for
wolfSSL. Follow the instructions in section 2.2 for building lighttpd.

6.2 Trying it Out

Run through all the steps in section 3 as a sanity check to make sure things
are working as expected.

The only things that need to be changed now are the certifcates and private
key and some client command-line arguments. For the certificates and private
key, simply go into OpenQuantumSafe's OpenSSL fork directory and execute the
following command (modifying the paths):

```
cat falcon_level5_entity_key.pem \
    falcon_level5_entity_cert.pem \
    falcon_level5_root_cert.pem \
    > /path/to/wolfStartUp/server.pem
````

Now run the web server as specified above. After that, execute the example
client like this:

./examples/client/client -p 443 -g -d \
                         -v 4 \
                         --pqc P521_KYBER_LEVEL5 \
                         -l TLS_AES_256_GCM_SHA384 \
                         -A /path/to/oqs/openssl/falcon_level5_root_cert.pem

`-v 4` specifies TLS 1.3. `--pqc P521_KYBER_LEVEL5` specifies ECDHE over curve
P521 hybridized with KYBER NIST Level 5. `-l TLS_AES_256_GCM_SHA384` specifies
the use of AES-256 which is considered to have the post-quantum strenth of
AES-128. `falcon_level5_entity_key.pem` specifies that the signature scheme to
be used is FALCON Level 5. All of these combined together make for a TLS 1.3
connection protected by post-quantum algorithms.
