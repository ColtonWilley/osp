From 03c2732f5c34bbb96eb2bdbc946a28d42bbff6f2 Mon Sep 17 00:00:00 2001
From: Brett Nicholas <brett.r.nicholas.15@dartmouth.edu>
Date: Thu, 6 Apr 2023 15:27:15 -0600
Subject: [PATCH] Add support for wolfSSL crypto

---
 CMakeLists.txt                                | 45 ++++++++-
 src/realm/CMakeLists.txt                      | 10 +-
 src/realm/sync/CMakeLists.txt                 |  2 +
 src/realm/sync/network/network_ssl.cpp        | 52 ++++++++--
 src/realm/sync/network/network_ssl.hpp        | 60 +++++++++++-
 src/realm/sync/noinst/server/CMakeLists.txt   |  2 +-
 .../noinst/server/crypto_server_openssl.cpp   | 11 +++
 src/realm/util/aes_cryptor.hpp                | 11 +++
 src/realm/util/config.h.in                    |  1 +
 src/realm/util/sha_crypto.cpp                 | 11 ++-
 tools/cmake/FindWolfSSL.cmake                 | 96 +++++++++++++++++++
 11 files changed, 282 insertions(+), 19 deletions(-)
 create mode 100644 tools/cmake/FindWolfSSL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a693f1c85..f16e5e42c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -299,13 +299,54 @@ elseif(REALM_ENABLE_ENCRYPTION AND CMAKE_SYSTEM_NAME MATCHES "Linux|Android")
     set(REALM_NEEDS_OPENSSL TRUE)
 endif()
 
-if(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
+# If the system determines we should use openSSL, and the user wants to substitute wolfSSL
+# we allow this combination for only Linux builds
+if(REALM_USE_WOLFSSL)
+    if(REALM_FORCE_OPENSSL)
+        message(FATAL_ERROR "option \"REALM_FORCE_OPENSSL\" incompatible with option \"REALM_USE_WOLFSSL\"")
+    endif()
+
+    if(NOT CMAKE_SYSTEM_NAME STREQUAL "Linux")
+        message(FATAL_ERROR "WolfSSL support only available on Linux, for now...")
+    endif()
+
+    if(NOT REALM_NEEDS_OPENSSL)
+        message(FATAL_ERROR "WolfSSL support only available for builds that would otherwise use OpenSSL")
+    endif()
+
+    set(REALM_NEEDS_WOLFSSL TRUE)
+    message(STATUS "Using wolfSSL compatibility layer over OpenSSL")
+endif()
+
+
+if(REALM_NEEDS_WOLFSSL AND REALM_NEEDS_OPENSSL)
+    # NOTE: this logic should eventually be changed to point to realm's self-hosted prebuilt WolfSSL
+    # and grab it using realm_aquire_dependency. For now we just allow pointing to an install directory
+    if (NOT REALM_USE_SYSTEM_WOLFSSL)
+        if(NOT DEFINED REALM_WOLFSSL_ROOT_DIR)
+            message(FATAL_ERROR "REALM_WOLFSSL_ROOT_DIR undefined. If you wish to build against the wolfSSL compatibility layer, define this variable \
+            to hold the path to your wolfSSL installation directory using -DREALM_WOLFSSL_ROOT_DIR=/path/to/wolfssl/install/dir")
+        endif()
+        set(WOLFSSL_ROOT_DIR ${REALM_WOLFSSL_ROOT_DIR})
+    else()
+        if(DEFINED REALM_WOLFSSL_ROOT_DIR)
+            message(FATAL_ERROR "option \"REALM_WOLFSSL_ROOT_DIR\" incompatible with option \"REALM_USE_SYSTEM_WOLFSSL\"")
+        endif()
+    endif()
+
+    set(WOLFSSL_USE_STATIC_LIBS ON)
+    find_package(WolfSSL REQUIRED)
+
+    set(REALM_HAVE_WOLFSSL ON)
+    # We also need to set REALM_HAVE_OPENSSL to enable the standard OpenSSL code paths
+    set(REALM_HAVE_OPENSSL ON)
+elseif(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
+    message(STATUS "using OpenSSL")
     option(REALM_USE_SYSTEM_OPENSSL "Look for an external OpenSSL installation instead of using prebuilt one." OFF)
     set(_REALM_USE_OPENSSL_DEFAULT_VERIFY_PATHS ON)
     if(NOT REALM_USE_SYSTEM_OPENSSL AND (ANDROID OR WIN32 OR CMAKE_SYSTEM_NAME STREQUAL "Linux"))
         # Use our own prebuilt OpenSSL
         realm_acquire_dependency(openssl ${DEP_OPENSSL_VERSION} OPENSSL_CMAKE_INCLUDE_FILE)
-
         include(${OPENSSL_CMAKE_INCLUDE_FILE})
         set(_REALM_USE_OPENSSL_DEFAULT_VERIFY_PATHS OFF)
     endif()
diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index 3cb6304a0..1c882105c 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -347,7 +347,7 @@ target_include_directories(Storage INTERFACE
 
 # On systems without a built-in SHA-1 implementation (or one provided by a dependency)
 # we need to bundle the public domain implementation.
-if(NOT APPLE AND NOT CMAKE_SYSTEM_NAME MATCHES "^Windows" AND NOT REALM_HAVE_OPENSSL)
+if(NOT APPLE AND NOT CMAKE_SYSTEM_NAME MATCHES "^Windows" AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL)
     add_library(sha1 OBJECT ../external/sha-1/sha1.c)
     target_include_directories(Storage PRIVATE ../external/sha-1)
     target_sources(Storage PRIVATE $<TARGET_OBJECTS:sha1>)
@@ -356,7 +356,7 @@ endif()
 # On systems without a built-in SHA-2 implementation (or one provided by a dependency)
 # we need to bundle the public domain implementation.
 # Note: This is also used on Windows because Windows lacks a native SHA224 hash needed for realm encryption
-if(NOT APPLE AND NOT REALM_HAVE_OPENSSL)
+if(NOT APPLE AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL)
     add_library(sha2 OBJECT ../external/sha-2/sha224.cpp ../external/sha-2/sha256.cpp)
     target_include_directories(Storage PRIVATE ../external/sha-2)
     target_sources(Storage PRIVATE $<TARGET_OBJECTS:sha2>)
@@ -392,7 +392,11 @@ if(REALM_HAVE_BACKTRACE AND NOT CMAKE_GENERATOR STREQUAL Xcode)
 endif()
 
 if(REALM_HAVE_OPENSSL AND (UNIX OR WIN32))
-    target_link_libraries(Storage PUBLIC OpenSSL::Crypto)
+    if (REALM_HAVE_WOLFSSL)
+        target_link_libraries(Storage PUBLIC WolfSSL)
+    elseif (REALM_HAVE_OPENSSL)
+        target_link_libraries(Storage PUBLIC OpenSSL::Crypto)
+    endif()
 endif()
 
 # Use Zlib if the imported target is defined, otherise use -lz on Apple platforms
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index 8896f15b5..5c1696286 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -103,6 +103,8 @@ target_link_libraries(Sync PUBLIC Storage)
 
 if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_link_options(Sync INTERFACE "SHELL:-framework Security")
+elseif(REALM_HAVE_WOLFSSL)
+    target_link_libraries(Sync PUBLIC WolfSSL)
 elseif(REALM_HAVE_OPENSSL)
     target_link_libraries(Sync PUBLIC OpenSSL::SSL)
 endif()
diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index d06d4a5c2..f46114279 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -6,9 +6,12 @@
 #include <realm/util/features.h>
 #include <realm/sync/network/network_ssl.hpp>
 
-#if REALM_HAVE_OPENSSL
-#include <openssl/conf.h>
-#include <openssl/x509v3.h>
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
+	#include <openssl/conf.h>
+	#include <openssl/x509v3.h>
+	#if REALM_HAVE_WOLFSSL
+		#include <openssl/ssl.h>
+	#endif
 #ifdef _WIN32
 using osslX509_NAME = X509_NAME; // alias this before including wincrypt.h because it gets clobbered
 #include <Windows.h>
@@ -183,7 +186,8 @@ void add_windows_certificate_store_lookup(X509_STORE* store)
 
 #endif // REALM_HAVE_OPENSSL && _WIN32
 
-#if REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER))
+#if REALM_HAVE_WOLFSSL || \
+    (REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)))
 
 // These must be made to execute before main() is called, i.e., before there is
 // any chance of threads being spawned.
@@ -240,9 +244,13 @@ OpensslInit::~OpensslInit()
     EVP_cleanup();
     CRYPTO_cleanup_all_ex_data();
     CONF_modules_unload(1);
+#if REALM_HAVE_WOLFSSL
+    wolfSSL_Cleanup();
+#endif
 }
 
-#endif // REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER))
+#endif // REALM_HAVE_WOLFSSL || (REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L ||
+       // defined(LIBRESSL_VERSION_NUMBER)))
 
 } // unnamed namespace
 
@@ -391,6 +399,11 @@ void Context::ssl_init()
     options |= SSL_OP_NO_COMPRESSION;
     SSL_CTX_set_options(ssl_ctx, options);
 
+#if REALM_HAVE_WOLFSSL
+    // mimic default OpenSSL behavior
+    SSL_CTX_set_verify(ssl_ctx, static_cast<int>(VerifyMode::none), nullptr);
+#endif
+
     m_ssl_ctx = ssl_ctx;
 }
 
@@ -510,6 +523,16 @@ public:
 
     BioMethod()
     {
+#if REALM_HAVE_WOLFSSL
+        bio_method = new BIO_METHOD();
+        bio_method->type = WOLFSSL_BIO_UNDEF;       // byte type
+        bio_method->writeCb = &Stream::bio_write;   // int (*writeCb)(BIO*, const char*, int)
+        bio_method->readCb = &Stream::bio_read;     // int (*readCb)(BIO*, char*, int)
+        bio_method->putsCb = &Stream::bio_puts;     // int (*putsCb)(BIO*, const char*)
+        bio_method->ctrlCb = &Stream::bio_ctrl;     // long (*ctrlCb)(BIO*, int, long, void*)
+        bio_method->createCb = &Stream::bio_create; // int (*createCb)(BIO*)
+        bio_method->freeCb = &Stream::bio_destroy;  // int (*freeCb)(BIO*)
+#else
         bio_method = new BIO_METHOD{
             BIO_TYPE_SOCKET,      // int type
             nullptr,              // const char* name
@@ -522,6 +545,7 @@ public:
             &Stream::bio_destroy, // int (*destroy)(BIO*)
             nullptr               // long (*callback_ctrl)(BIO*, int, bio_info_cb*)
         };
+#endif
     }
 
     ~BioMethod()
@@ -595,7 +619,7 @@ bool check_san(X509* server_cert, const std::string& host_name)
 
         if (current_name->type == GEN_DNS) {
             // Current name is a DNS name
-            char* dns_name = static_cast<char*>(ASN1_STRING_data(current_name->d.dNSName));
+            char* dns_name = reinterpret_cast<char*>(ASN1_STRING_data(current_name->d.dNSName));
 
             // Make sure there isn't an embedded NUL character in the DNS name
             if (static_cast<std::size_t>(ASN1_STRING_length(current_name->d.dNSName)) != std::strlen(dns_name))
@@ -802,7 +826,9 @@ void Stream::ssl_init()
         throw std::system_error(ec);
     }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     BIO_set_data(bio, this);
 #else
     bio->ptr = this;
@@ -821,7 +847,9 @@ void Stream::ssl_destroy() noexcept
 
 int Stream::bio_write(BIO* bio, const char* data, int size) noexcept
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     Stream& stream = *static_cast<Stream*>(BIO_get_data(bio));
 #else
     Stream& stream = *static_cast<Stream*>(bio->ptr);
@@ -845,7 +873,9 @@ int Stream::bio_write(BIO* bio, const char* data, int size) noexcept
 
 int Stream::bio_read(BIO* bio, char* buffer, int size) noexcept
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     Stream& stream = *static_cast<Stream*>(BIO_get_data(bio));
 #else
     Stream& stream = *static_cast<Stream*>(bio->ptr);
@@ -904,7 +934,9 @@ long Stream::bio_ctrl(BIO*, int cmd, long, void*) noexcept
 
 int Stream::bio_create(BIO* bio) noexcept
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     BIO_set_init(bio, 1);
     BIO_set_data(bio, nullptr);
     BIO_clear_flags(bio, 0);
diff --git a/src/realm/sync/network/network_ssl.hpp b/src/realm/sync/network/network_ssl.hpp
index 07b607947..cc10ab356 100644
--- a/src/realm/sync/network/network_ssl.hpp
+++ b/src/realm/sync/network/network_ssl.hpp
@@ -15,6 +15,17 @@
 #include <realm/util/optional.hpp>
 #include <realm/util/logger.hpp>
 
+#if REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+#endif /* REALM_HAVE_WOLFSSL */
+
 #if REALM_HAVE_OPENSSL
 #include <openssl/ssl.h>
 #include <openssl/err.h>
@@ -472,6 +483,10 @@ private:
     template <class Oper>
     std::size_t ssl_perform(Oper oper, std::error_code& ec, Want& want) noexcept;
 
+#if REALM_HAVE_WOLFSSL
+    static void ssl_map_wolfssl_error_codes(int& ret, int& ssl_error, int& sys_error) noexcept;
+#endif
+
     int do_ssl_accept() noexcept;
     int do_ssl_connect() noexcept;
     int do_ssl_shutdown() noexcept;
@@ -1174,11 +1189,15 @@ std::size_t Stream::ssl_perform(Oper oper, std::error_code& ec, Want& want) noex
     int ssl_error = SSL_get_error(m_ssl, ret);
     int sys_error = int(ERR_peek_last_error());
 
+#if REALM_HAVE_WOLFSSL
+    REALM_ASSERT(!m_bio_error_code || ssl_error == SOCKET_ERROR_E || ssl_error == SOCKET_PEER_CLOSED_E);
+
+    ssl_map_wolfssl_error_codes(ret, ssl_error, sys_error);
+#else
     // Guaranteed by the documentation of SSL_get_error()
     REALM_ASSERT((ret > 0) == (ssl_error == SSL_ERROR_NONE));
-
     REALM_ASSERT(!m_bio_error_code || ssl_error == SSL_ERROR_SYSCALL);
-
+#endif
     // Judging from various comments in the man pages, and from experience with
     // the API, it seems that,
     //
@@ -1266,6 +1285,43 @@ std::size_t Stream::ssl_perform(Oper oper, std::error_code& ec, Want& want) noex
     return 0;
 }
 
+#if REALM_HAVE_WOLFSSL
+inline void Stream::ssl_map_wolfssl_error_codes(int& ret, int& ssl_error, int& sys_error) noexcept
+{
+    // Map some common wolfSSL error codes to OpenSSL ones
+    // wolfSSL returns a more specific error codes for issues than openSSL's simple
+    // "ssl error" and "syscall error", however realm's tests and some business logic
+    // are written with OpenSSLs errors in mind, so we map them here to be non-intrusive
+    if (ret == WOLFSSL_FATAL_ERROR) {
+        switch (ssl_error) {
+            case SOCKET_ERROR_E:
+                ssl_error = SSL_ERROR_SYSCALL;
+                sys_error = 0;
+                break;
+            case VERIFY_CERT_ERROR:
+            case FATAL_ERROR:
+            case ASN_NO_SIGNER_E:
+                ssl_error = SSL_ERROR_SSL;
+                sys_error = 0;
+                break;
+            default:
+                break;
+        }
+    }
+    else if (ret == WOLFSSL_ERROR_NONE && ssl_error != WOLFSSL_ERROR_NONE) {
+        switch (ssl_error) {
+            case SOCKET_PEER_CLOSED_E:
+                ret = WOLFSSL_FATAL_ERROR;
+                ssl_error = SSL_ERROR_SYSCALL;
+                sys_error = 0;
+                break;
+            default:
+                break;
+        }
+    }
+}
+#endif
+
 inline int Stream::do_ssl_accept() noexcept
 {
     int ret = SSL_accept(m_ssl);
diff --git a/src/realm/sync/noinst/server/CMakeLists.txt b/src/realm/sync/noinst/server/CMakeLists.txt
index a650c4840..f0fc05eaa 100644
--- a/src/realm/sync/noinst/server/CMakeLists.txt
+++ b/src/realm/sync/noinst/server/CMakeLists.txt
@@ -31,7 +31,7 @@ target_link_libraries(SyncServer PUBLIC Sync QueryParser)
 
 if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_sources(SyncServer PRIVATE crypto_server_apple.mm)
-elseif(REALM_HAVE_OPENSSL)
+elseif(REALM_HAVE_OPENSSL OR REALM_HAVE_WOLFSSL)
     target_sources(SyncServer PRIVATE crypto_server_openssl.cpp)
 else()
     target_sources(SyncServer PRIVATE crypto_server_stub.cpp)
diff --git a/src/realm/sync/noinst/server/crypto_server_openssl.cpp b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
index 559e11cbe..efb802608 100644
--- a/src/realm/sync/noinst/server/crypto_server_openssl.cpp
+++ b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
@@ -1,5 +1,16 @@
 #include <realm/sync/noinst/server/crypto_server.hpp>
 
+#if REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+#endif /* REALM_HAVE_WOLFSSL */
+
 #include <openssl/bio.h>
 #include <openssl/pem.h>
 #include <openssl/evp.h>
diff --git a/src/realm/util/aes_cryptor.hpp b/src/realm/util/aes_cryptor.hpp
index b4e4d852a..8b3af095e 100644
--- a/src/realm/util/aes_cryptor.hpp
+++ b/src/realm/util/aes_cryptor.hpp
@@ -57,6 +57,17 @@ protected:
 #include <bcrypt.h>
 #pragma comment(lib, "bcrypt.lib")
 #else
+#if REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+#endif /* REALM_HAVE_WOLFSSL */
+
 #include <openssl/sha.h>
 #include <openssl/evp.h>
 #endif
diff --git a/src/realm/util/config.h.in b/src/realm/util/config.h.in
index 508dc064a..1b07c7602 100644
--- a/src/realm/util/config.h.in
+++ b/src/realm/util/config.h.in
@@ -6,6 +6,7 @@
 #cmakedefine01 REALM_HAVE_POSIX_FALLOCATE
 #cmakedefine01 REALM_USE_SYSTEM_OPENSSL_PATHS
 #cmakedefine01 REALM_HAVE_OPENSSL
+#cmakedefine01 REALM_HAVE_WOLFSSL
 #cmakedefine01 REALM_HAVE_SECURE_TRANSPORT
 #cmakedefine01 REALM_HAVE_PTHREAD_GETNAME
 #cmakedefine01 REALM_HAVE_PTHREAD_SETNAME
diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index 6be0295c2..149ef4165 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -32,7 +32,16 @@
 #include <sha1.h>
 #define REALM_USE_BUNDLED_SHA2 1
 #endif
-
+#if REALM_HAVE_WOLFSSL
+	#ifdef HAVE_CONFIG_H
+		#include <config.h>
+	#endif
+	#ifndef WOLFSSL_USER_SETTINGS
+		#include <wolfssl/options.h>
+	#else
+		#include <wolfssl/wolfcrypt/settings.h>
+	#endif
+#endif /* REALM_HAVE_WOLFSSL */
 /*
  * OpenSSL can be used with Windows. If this is the case:
  * The Sha-1 & Sha-2 submodules are no longer needed, so the
diff --git a/tools/cmake/FindWolfSSL.cmake b/tools/cmake/FindWolfSSL.cmake
new file mode 100644
index 000000000..c6c4b7e96
--- /dev/null
+++ b/tools/cmake/FindWolfSSL.cmake
@@ -0,0 +1,96 @@
+#[=======================================================================[.rst:
+FindWolfSSL
+---------
+
+Find WolfSSL includes and library. For now this only works when pointed to the output directory
+of a wolfSSL build that was configured using the following configure line:
+./configure --enable-static --enable-certgen --enable-opensslall --enable-opensslextra \
+    --enable-context-extra-user-data --prefix=/path/to/output-dir
+
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+An :ref:`imported target <Imported targets>` named
+``WolfSSL`` is provided if WolfSSL has been found.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This module defines the following variables:
+
+``WolfSSL_FOUND``
+  True if WolfSSL was found, false otherwise.
+``WolfSSL_INCLUDE_DIRS``
+  Include directories needed to include WolfSSL headers.
+``WolfSSL_LIBRARIES``
+  Libraries needed to link to WolfSSL.
+
+
+Hints
+^^^^^
+
+The following variables may be set to control search behavior:
+
+``WOLFSSL_ROOT_DIR``
+  Set to the root directory of a wolfSSL installation.
+
+``WOLFSSL_USE_STATIC_LIBS``
+  Set to ``TRUE`` to look for static libraries.
+
+
+#]=======================================================================]
+
+#-----------------------------------------------------------------------------
+if(NOT CMAKE_SYSTEM_NAME STREQUAL "Linux")
+    message(FATAL_ERROR "FindWolfSSL.cmake only supports Linux, for now...")
+endif()
+
+# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES
+if(WOLFSSL_USE_STATIC_LIBS)
+  # save the original find library ordering so we can restore it later
+  set(WOLFSSL_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
+  # replace with our static lib suffix
+  set(CMAKE_FIND_LIBRARY_SUFFIXES .a )
+endif()
+
+if(EXISTS ${WOLFSSL_ROOT_DIR})
+    set(CMAKE_PREFIX_PATH ${WOLFSSL_ROOT_DIR})
+endif()
+
+find_library(WolfSSL_LIBRARY NAMES wolfssl libwolfssl HINTS ${WOLFSSL_ROOT_DIR})
+mark_as_advanced(WolfSSL_LIBRARY)
+
+find_path(WolfSSL_INCLUDE_DIR NAMES wolfssl/ssl.h HINTS ${WOLFSSL_ROOT_DIR})
+mark_as_advanced(WolfSSL_INCLUDE_DIR)
+
+# we need to add one additional include for the openssl compatibility layer
+find_path(WolfSSL_OpenSSL_Compat_INCLUDE_DIR NAMES openssl/ssl.h HINTS ${WOLFSSL_ROOT_DIR} PATH_SUFFIXES "wolfssl")
+list(APPEND WolfSSL_INCLUDE_DIR ${WolfSSL_OpenSSL_Compat_INCLUDE_DIR})
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(WolfSSL
+    FOUND_VAR WolfSSL_FOUND
+    REQUIRED_VARS WolfSSL_LIBRARY WolfSSL_INCLUDE_DIR
+    )
+set(WOLFSSL_FOUND ${WolfSSL_FOUND})
+
+#-----------------------------------------------------------------------------
+# Provide documented result variables and targets.
+if(WolfSSL_FOUND)
+    set(WolfSSL_INCLUDE_DIRS ${WolfSSL_INCLUDE_DIR})
+    set(WolfSSL_LIBRARIES ${WolfSSL_LIBRARY})
+    if(NOT TARGET WolfSSL)
+        add_library(WolfSSL UNKNOWN IMPORTED)
+        set_target_properties(WolfSSL PROPERTIES
+            IMPORTED_LOCATION "${WolfSSL_LIBRARY}"
+            INTERFACE_INCLUDE_DIRECTORIES "${WolfSSL_INCLUDE_DIRS}"
+            )
+    endif()
+endif()
+
+
+if(WOLFSSL_USE_STATIC_LIBS)
+    set(CMAKE_FIND_LIBRARY_SUFFIXES ${WOLFSSL_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
+endif()
+unset(CMAKE_PREFIX_PATH)
-- 
2.34.1

