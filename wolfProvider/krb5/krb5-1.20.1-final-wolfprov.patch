diff --git a/src/lib/crypto/crypto_tests/Makefile.in b/src/lib/crypto/crypto_tests/Makefile.in
index 1a3fe5966..8f94a4882 100644
--- a/src/lib/crypto/crypto_tests/Makefile.in
+++ b/src/lib/crypto/crypto_tests/Makefile.in
@@ -44,8 +44,6 @@ check-unix: t_nfold t_encrypt t_decrypt t_prf t_cmac t_hmac \
 	cmp vk.txt $(srcdir)/expect-vk.txt
 	$(RUN_TEST) ./aes-test > vt.txt
 	cmp vt.txt $(srcdir)/expect-vt.txt
-	$(RUN_TEST) ./camellia-test > camellia-vt.txt
-	cmp camellia-vt.txt $(srcdir)/camellia-expect-vt.txt
 	$(RUN_TEST) $(C)t_mddriver4 -x
 	$(RUN_TEST) $(C)t_mddriver -x
 	$(RUN_TEST) ./t_sha2
@@ -53,8 +51,6 @@ check-unix: t_nfold t_encrypt t_decrypt t_prf t_cmac t_hmac \
 	$(RUN_TEST) ./t_str2key
 	$(RUN_TEST) ./t_derive
 	$(RUN_TEST) ./t_fork
-	$(RUN_TEST) ./t_cf2 <$(srcdir)/t_cf2.in >t_cf2.output
-	diff t_cf2.output $(srcdir)/t_cf2.expected
 #	$(RUN_TEST) ./t_pkcs5
 
 t_nfold$(EXEEXT): t_nfold.$(OBJEXT) $(KRB5_BASE_DEPLIBS)
diff --git a/src/lib/crypto/crypto_tests/camellia-test.c b/src/lib/crypto/crypto_tests/camellia-test.c
index 23d14667e..1e9d68708 100644
--- a/src/lib/crypto/crypto_tests/camellia-test.c
+++ b/src/lib/crypto/crypto_tests/camellia-test.c
@@ -132,10 +132,6 @@ int main (int argc, char *argv[])
 		argv[0], argv[0]);
 	return 1;
     }
-    init();
-    if (argc == 2)
-	vk_test();
-    else
-	vt_test();
+    /* No camellia support in wolfProvider */
     return 0;
 }
diff --git a/src/lib/crypto/crypto_tests/t_cksums.c b/src/lib/crypto/crypto_tests/t_cksums.c
index 557340ec5..0704e0305 100644
--- a/src/lib/crypto/crypto_tests/t_cksums.c
+++ b/src/lib/crypto/crypto_tests/t_cksums.c
@@ -40,35 +40,6 @@ struct test {
     krb5_data keybits;
     krb5_data cksum;
 } test_cases[] = {
-    {
-        { KV5M_DATA, 3, "one" },
-        CKSUMTYPE_RSA_MD4, 0, 0, { KV5M_DATA, 0, "" },
-        { KV5M_DATA, 16,
-          "\x30\x5D\xCC\x2C\x0F\xDD\x53\x39\x96\x95\x52\xC7\xB8\x99\x63\x48" }
-    },
-    {
-        { KV5M_DATA, 19, "two three four five" },
-        CKSUMTYPE_RSA_MD5, 0, 0, { KV5M_DATA, 0, "" },
-        { KV5M_DATA, 16,
-          "\xBA\xB5\x32\x15\x51\xE1\x08\x44\x90\x86\x96\x35\xB3\xC2\x68\x15" }
-    },
-    {
-        { KV5M_DATA, 0, "" },
-        CKSUMTYPE_SHA1, 0, 0, { KV5M_DATA, 0, "" },
-        { KV5M_DATA, 20,
-          "\xDA\x39\xA3\xEE\x5E\x6B\x4B\x0D\x32\x55\xBF\xEF\x95\x60\x18\x90"
-          "\xAF\xD8\x07\x09" }
-    },
-    {
-        { KV5M_DATA, 9, "six seven" },
-        CKSUMTYPE_HMAC_SHA1_DES3, ENCTYPE_DES3_CBC_SHA1, 2,
-        { KV5M_DATA, 24,
-          "\x7A\x25\xDF\x89\x92\x29\x6D\xCE\xDA\x0E\x13\x5B\xC4\x04\x6E\x23"
-          "\x75\xB3\xC1\x4C\x98\xFB\xC1\x62" },
-        { KV5M_DATA, 20,
-          "\x0E\xEF\xC9\xC3\xE0\x49\xAA\xBC\x1B\xA5\xC4\x01\x67\x7D\x9A\xB6"
-          "\x99\x08\x2B\xB4" }
-    },
     {
         { KV5M_DATA, 37, "eight nine ten eleven twelve thirteen" },
         CKSUMTYPE_HMAC_SHA1_96_AES128, ENCTYPE_AES128_CTS_HMAC_SHA1_96, 3,
@@ -86,56 +57,6 @@ struct test {
         { KV5M_DATA, 12,
           "\xE0\x87\x39\xE3\x27\x9E\x29\x03\xEC\x8E\x38\x36" }
     },
-    {
-        { KV5M_DATA, 15, "fifteen sixteen" },
-        CKSUMTYPE_MD5_HMAC_ARCFOUR, ENCTYPE_ARCFOUR_HMAC, 5,
-        { KV5M_DATA, 16,
-          "\xF7\xD3\xA1\x55\xAF\x5E\x23\x8A\x0B\x7A\x87\x1A\x96\xBA\x2A\xB2" },
-        { KV5M_DATA, 16,
-          "\x9F\x41\xDF\x30\x49\x07\xDE\x73\x54\x47\x00\x1F\xD2\xA1\x97\xB9" }
-    },
-    {
-        { KV5M_DATA, 34, "seventeen eighteen nineteen twenty" },
-        CKSUMTYPE_HMAC_MD5_ARCFOUR, ENCTYPE_ARCFOUR_HMAC, 6,
-        { KV5M_DATA, 16,
-          "\xF7\xD3\xA1\x55\xAF\x5E\x23\x8A\x0B\x7A\x87\x1A\x96\xBA\x2A\xB2" },
-        { KV5M_DATA, 16,
-          "\xEB\x38\xCC\x97\xE2\x23\x0F\x59\xDA\x41\x17\xDC\x58\x59\xD7\xEC" }
-    },
-    {
-        { KV5M_DATA, 11, "abcdefghijk" },
-        CKSUMTYPE_CMAC_CAMELLIA128, ENCTYPE_CAMELLIA128_CTS_CMAC, 7,
-        { KV5M_DATA, 16,
-          "\x1D\xC4\x6A\x8D\x76\x3F\x4F\x93\x74\x2B\xCB\xA3\x38\x75\x76\xC3" },
-        { KV5M_DATA, 16,
-          "\x11\x78\xE6\xC5\xC4\x7A\x8C\x1A\xE0\xC4\xB9\xC7\xD4\xEB\x7B\x6B" }
-    },
-    {
-        { KV5M_DATA, 26, "ABCDEFGHIJKLMNOPQRSTUVWXYZ" },
-        CKSUMTYPE_CMAC_CAMELLIA128, ENCTYPE_CAMELLIA128_CTS_CMAC, 8,
-        { KV5M_DATA, 16,
-          "\x50\x27\xBC\x23\x1D\x0F\x3A\x9D\x23\x33\x3F\x1C\xA6\xFD\xBE\x7C" },
-        { KV5M_DATA, 16,
-          "\xD1\xB3\x4F\x70\x04\xA7\x31\xF2\x3A\x0C\x00\xBF\x6C\x3F\x75\x3A" }
-    },
-    {
-        { KV5M_DATA, 9, "123456789" },
-        CKSUMTYPE_CMAC_CAMELLIA256, ENCTYPE_CAMELLIA256_CTS_CMAC, 9,
-        { KV5M_DATA, 32,
-          "\xB6\x1C\x86\xCC\x4E\x5D\x27\x57\x54\x5A\xD4\x23\x39\x9F\xB7\x03"
-          "\x1E\xCA\xB9\x13\xCB\xB9\x00\xBD\x7A\x3C\x6D\xD8\xBF\x92\x01\x5B" },
-        { KV5M_DATA, 16,
-          "\x87\xA1\x2C\xFD\x2B\x96\x21\x48\x10\xF0\x1C\x82\x6E\x77\x44\xB1" }
-    },
-    {
-        { KV5M_DATA, 30, "!@#$%^&*()!@#$%^&*()!@#$%^&*()" },
-        CKSUMTYPE_CMAC_CAMELLIA256, ENCTYPE_CAMELLIA256_CTS_CMAC, 10,
-        { KV5M_DATA, 32,
-          "\x32\x16\x4C\x5B\x43\x4D\x1D\x15\x38\xE4\xCF\xD9\xBE\x80\x40\xFE"
-          "\x8C\x4A\xC7\xAC\xC4\xB9\x3D\x33\x14\xD2\x13\x36\x68\x14\x7A\x05" },
-        { KV5M_DATA, 16,
-          "\x3F\xA0\xB4\x23\x55\xE5\x2B\x18\x91\x87\x29\x4A\xA2\x52\xAB\x64" }
-    },
     {
         { KV5M_DATA, 21,
           "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F"
diff --git a/src/lib/crypto/crypto_tests/t_cmac.c b/src/lib/crypto/crypto_tests/t_cmac.c
index 565c35da7..bf82581b7 100644
--- a/src/lib/crypto/crypto_tests/t_cmac.c
+++ b/src/lib/crypto/crypto_tests/t_cmac.c
@@ -99,49 +99,6 @@ check_result(const char *name, const unsigned char *result,
 int
 main(int argc, char **argv)
 {
-    krb5_error_code ret;
-    krb5_context context = NULL;
-    krb5_keyblock keyblock;
-    krb5_key key;
-    const struct krb5_enc_provider *enc = &krb5int_enc_camellia128;
-    krb5_crypto_iov iov;
-    unsigned char resultbuf[16];
-    krb5_data result = make_data(resultbuf, 16);
-
-    /* Create the example key. */
-    keyblock.magic = KV5M_KEYBLOCK;
-    keyblock.enctype = ENCTYPE_CAMELLIA128_CTS_CMAC;
-    keyblock.length = 16;
-    keyblock.contents = keybytes;
-    ret = krb5_k_create_key(context, &keyblock, &key);
-    assert(!ret);
-
-    /* Example 1. */
-    iov.flags = KRB5_CRYPTO_TYPE_DATA;
-    iov.data = make_data(input, 0);
-    ret = krb5int_cmac_checksum(enc, key, &iov, 1, &result);
-    assert(!ret);
-    check_result("example 1", resultbuf, cmac1);
-
-    /* Example 2. */
-    iov.data.length = 16;
-    ret = krb5int_cmac_checksum(enc, key, &iov, 1, &result);
-    assert(!ret);
-    check_result("example 2", resultbuf, cmac2);
-
-    /* Example 3. */
-    iov.data.length = 40;
-    ret = krb5int_cmac_checksum(enc, key, &iov, 1, &result);
-    assert(!ret);
-    check_result("example 3", resultbuf, cmac3);
-
-    /* Example 4. */
-    iov.data.length = 64;
-    ret = krb5int_cmac_checksum(enc, key, &iov, 1, &result);
-    assert(!ret);
-    check_result("example 4", resultbuf, cmac4);
-
-    printf("All CMAC tests passed.\n");
-    krb5_k_free_key(context, key);
+    /* CMAC tests require camellia, which is not supported in wolfProvider */
     return 0;
 }
diff --git a/src/lib/crypto/crypto_tests/t_decrypt.c b/src/lib/crypto/crypto_tests/t_decrypt.c
index a40a85500..164a0fce4 100644
--- a/src/lib/crypto/crypto_tests/t_decrypt.c
+++ b/src/lib/crypto/crypto_tests/t_decrypt.c
@@ -39,162 +39,6 @@ struct test {
     krb5_data keybits;
     krb5_data ciphertext;
 } test_cases[] = {
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 0, "", }, 0,
-        { KV5M_DATA, 24,
-          "\x7A\x25\xDF\x89\x92\x29\x6D\xCE\xDA\x0E\x13\x5B\xC4\x04\x6E\x23"
-          "\x75\xB3\xC1\x4C\x98\xFB\xC1\x62" },
-        { KV5M_DATA, 28,
-          "\x54\x8A\xF4\xD5\x04\xF7\xD7\x23\x30\x3F\x12\x17\x5F\xE8\x38\x6B"
-          "\x7B\x53\x35\xA9\x67\xBA\xD6\x1F\x3B\xF0\xB1\x43" }
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 1, "1", }, 1,
-        { KV5M_DATA, 24,
-          "\xBC\x07\x83\x89\x15\x13\xD5\xCE\x57\xBC\x13\x8F\xD3\xC1\x1A\xE6"
-          "\x40\x45\x23\x85\x32\x29\x62\xB6" },
-        { KV5M_DATA, 36,
-          "\x9C\x3C\x1D\xBA\x47\x47\xD8\x5A\xF2\x91\x6E\x47\x45\xF2\xDC\xE3"
-          "\x80\x46\x79\x6E\x51\x04\xBC\xCD\xFB\x66\x9A\x91\xD4\x4B\xC3\x56"
-          "\x66\x09\x45\xC7" }
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 9, "9 bytesss", }, 2,
-        { KV5M_DATA, 24,
-          "\x2F\xD0\xF7\x25\xCE\x04\x10\x0D\x2F\xC8\xA1\x80\x98\x83\x1F\x85"
-          "\x0B\x45\xD9\xEF\x85\x0B\xD9\x20" },
-        { KV5M_DATA, 44,
-          "\xCF\x91\x44\xEB\xC8\x69\x79\x81\x07\x5A\x8B\xAD\x8D\x74\xE5\xD7"
-          "\xD5\x91\xEB\x7D\x97\x70\xC7\xAD\xA2\x5E\xE8\xC5\xB3\xD6\x94\x44"
-          "\xDF\xEC\x79\xA5\xB7\xA0\x14\x82\xD9\xAF\x74\xE6" }
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 13, "13 bytes byte", }, 3,
-        { KV5M_DATA, 24,
-          "\x0D\xD5\x20\x94\xE0\xF4\x1C\xEC\xCB\x5B\xE5\x10\xA7\x64\xB3\x51"
-          "\x76\xE3\x98\x13\x32\xF1\xE5\x98" },
-        { KV5M_DATA, 44,
-          "\x83\x9A\x17\x08\x1E\xCB\xAF\xBC\xDC\x91\xB8\x8C\x69\x55\xDD\x3C"
-          "\x45\x14\x02\x3C\xF1\x77\xB7\x7B\xF0\xD0\x17\x7A\x16\xF7\x05\xE8"
-          "\x49\xCB\x77\x81\xD7\x6A\x31\x6B\x19\x3F\x8D\x30" }
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 30, "30 bytes bytes bytes bytes byt", }, 4,
-        { KV5M_DATA, 24,
-          "\xF1\x16\x86\xCB\xBC\x9E\x23\xEA\x54\xFE\xCD\x2A\x3D\xCD\xFB\x20"
-          "\xB6\xFE\x98\xBF\x26\x45\xC4\xC4" },
-        { KV5M_DATA, 60,
-          "\x89\x43\x3E\x83\xFD\x0E\xA3\x66\x6C\xFF\xCD\x18\xD8\xDE\xEB\xC5"
-          "\x3B\x9A\x34\xED\xBE\xB1\x59\xD9\xF6\x67\xC6\xC2\xB9\xA9\x64\x40"
-          "\x1D\x55\xE7\xE9\xC6\x8D\x64\x8D\x65\xC3\xAA\x84\xFF\xA3\x79\x0C"
-          "\x14\xA8\x64\xDA\x80\x73\xA9\xA9\x5C\x4B\xA2\xBC" }
-    },
-
-    {
-        ENCTYPE_ARCFOUR_HMAC,
-        { KV5M_DATA, 0, "", }, 0,
-        { KV5M_DATA, 16,
-          "\xF8\x1F\xEC\x39\x25\x5F\x57\x84\xE8\x50\xC4\x37\x7C\x88\xBD\x85" },
-        { KV5M_DATA, 24,
-          "\x02\xC1\xEB\x15\x58\x61\x44\x12\x2E\xC7\x17\x76\x3D\xD3\x48\xBF"
-          "\x00\x43\x4D\xDC\x65\x85\x95\x4C" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC,
-        { KV5M_DATA, 1, "1", }, 1,
-        { KV5M_DATA, 16,
-          "\x67\xD1\x30\x0D\x28\x12\x23\x86\x7F\x96\x47\xFF\x48\x72\x12\x73" },
-        { KV5M_DATA, 25,
-          "\x61\x56\xE0\xCC\x04\xE0\xA0\x87\x4F\x9F\xDA\x00\x8F\x49\x8A\x7A"
-          "\xDB\xBC\x80\xB7\x0B\x14\xDD\xDB\xC0" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC,
-        { KV5M_DATA, 9, "9 bytesss", }, 2,
-        { KV5M_DATA, 16,
-          "\x3E\x40\xAB\x60\x93\x69\x52\x81\xB3\xAC\x1A\x93\x04\x22\x4D\x98" },
-        { KV5M_DATA, 33,
-          "\x0F\x9A\xD1\x21\xD9\x9D\x4A\x09\x44\x8E\x4F\x1F\x71\x8C\x4F\x5C"
-          "\xBE\x60\x96\x26\x2C\x66\xF2\x9D\xF2\x32\xA8\x7C\x9F\x98\x75\x5D"
-          "\x55" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC,
-        { KV5M_DATA, 13, "13 bytes byte", }, 3,
-        { KV5M_DATA, 16,
-          "\x4B\xA2\xFB\xF0\x37\x9F\xAE\xD8\x7A\x25\x4D\x3B\x35\x3D\x5A\x7E" },
-        { KV5M_DATA, 37,
-          "\x61\x2C\x57\x56\x8B\x17\xA7\x03\x52\xBA\xE8\xCF\x26\xFB\x94\x59"
-          "\xA6\xF3\x35\x3C\xD3\x5F\xD4\x39\xDB\x31\x07\xCB\xEC\x76\x5D\x32"
-          "\x6D\xFC\x04\xC1\xDD" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC,
-        { KV5M_DATA, 30, "30 bytes bytes bytes bytes byt", }, 4,
-        { KV5M_DATA, 16,
-          "\x68\xF2\x63\xDB\x3F\xCE\x15\xD0\x31\xC9\xEA\xB0\x2D\x67\x10\x7A" },
-        { KV5M_DATA, 54,
-          "\x95\xF9\x04\x7C\x3A\xD7\x58\x91\xC2\xE9\xB0\x4B\x16\x56\x6D\xC8"
-          "\xB6\xEB\x9C\xE4\x23\x1A\xFB\x25\x42\xEF\x87\xA7\xB5\xA0\xF2\x60"
-          "\xA9\x9F\x04\x60\x50\x8D\xE0\xCE\xCC\x63\x2D\x07\xC3\x54\x12\x4E"
-          "\x46\xC5\xD2\x23\x4E\xB8" }
-    },
-
-    {
-        ENCTYPE_ARCFOUR_HMAC_EXP,
-        { KV5M_DATA, 0, "", }, 0,
-        { KV5M_DATA, 16,
-          "\xF7\xD3\xA1\x55\xAF\x5E\x23\x8A\x0B\x7A\x87\x1A\x96\xBA\x2A\xB2" },
-        { KV5M_DATA, 24,
-          "\x28\x27\xF0\xE9\x0F\x62\xE7\x46\x0C\x4E\x2F\xB3\x9F\x96\x57\xBA"
-          "\x8B\xFA\xA9\x91\xD7\xFD\xAD\xFF" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC_EXP,
-        { KV5M_DATA, 1, "1", }, 1,
-        { KV5M_DATA, 16,
-          "\xDE\xEA\xA0\x60\x7D\xB7\x99\xE2\xFD\xD6\xDB\x29\x86\xBB\x8D\x65" },
-        { KV5M_DATA, 25,
-          "\x3D\xDA\x39\x2E\x2E\x27\x5A\x4D\x75\x18\x3F\xA6\x32\x8A\x0A\x4E"
-          "\x6B\x75\x2D\xF6\xCD\x2A\x25\xFA\x4E" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC_EXP,
-        { KV5M_DATA, 9, "9 bytesss", }, 2,
-        { KV5M_DATA, 16,
-          "\x33\xAD\x7F\xC2\x67\x86\x15\x56\x9B\x2B\x09\x83\x6E\x0A\x3A\xB6" },
-        { KV5M_DATA, 33,
-          "\x09\xD1\x36\xAC\x48\x5D\x92\x64\x4E\xC6\x70\x1D\x6A\x0D\x03\xE8"
-          "\x98\x2D\x7A\x3C\xA7\xEF\xD0\xF8\xF4\xF8\x36\x60\xEF\x42\x77\xBB"
-          "\x81" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC_EXP,
-        { KV5M_DATA, 13, "13 bytes byte", }, 3,
-        { KV5M_DATA, 16,
-          "\x39\xF2\x5C\xD4\xF0\xD4\x1B\x2B\x2D\x9D\x30\x0F\xCB\x29\x81\xCB" },
-        { KV5M_DATA, 37,
-          "\x91\x23\x88\xD7\xC0\x76\x12\x81\x9E\x3B\x64\x0F\xF5\xCE\xCD\xAF"
-          "\x72\xE5\xA5\x9D\xF1\x0F\x10\x91\xA6\xBE\xC3\x9C\xAA\xD7\x48\xAF"
-          "\x9B\xD2\xD8\xD5\x46" }
-    },
-    {
-        ENCTYPE_ARCFOUR_HMAC_EXP,
-        { KV5M_DATA, 30, "30 bytes bytes bytes bytes byt", }, 4,
-        { KV5M_DATA, 16,
-          "\x9F\x72\x55\x42\xD9\xF7\x2A\xA1\xF3\x86\xCB\xE7\x89\x69\x84\xFC" },
-        { KV5M_DATA, 54,
-          "\x78\xB3\x5A\x08\xB0\x8B\xE2\x65\xAE\xB4\x14\x5F\x07\x65\x13\xB6"
-          "\xB5\x6E\xFE\xD3\xF7\x52\x65\x74\xAF\x74\xF7\xD2\xF9\xBA\xE9\x6E"
-          "\xAB\xB7\x6F\x2D\x87\x38\x6D\x2E\x93\xE3\xA7\x7B\x99\x91\x9F\x1D"
-          "\x97\x64\x90\xE2\xBD\x45" }
-    },
-
     {
         ENCTYPE_AES128_CTS_HMAC_SHA1_96,
         { KV5M_DATA, 0, "", }, 0,
@@ -244,7 +88,6 @@ struct test {
           "\x15\x6E\xCB\x53\x2F\xC2\x03\xE3\x0F\xF6\x00\xB6\x3B\x35\x09\x39"
           "\xFE\xCE\x51\x0F\x02\xD7\xFF\x1E\x7B\xAC" }
     },
-
     {
         ENCTYPE_AES256_CTS_HMAC_SHA1_96,
         { KV5M_DATA, 0, "", }, 0,
@@ -299,114 +142,6 @@ struct test {
           "\x29\x5C\x68\x88\x58\xF3\xB3\x4B\x9C\xBD\x6E\xEB\xAE\x81\xDA\xF6"
           "\xB7\x34\xD4\xD4\x98\xB6\x71\x4F\x1C\x1D" }
     },
-
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 0, "", }, 0,
-        { KV5M_DATA, 16,
-          "\x1D\xC4\x6A\x8D\x76\x3F\x4F\x93\x74\x2B\xCB\xA3\x38\x75\x76\xC3" },
-        { KV5M_DATA, 32,
-          "\xC4\x66\xF1\x87\x10\x69\x92\x1E\xDB\x7C\x6F\xDE\x24\x4A\x52\xDB"
-          "\x0B\xA1\x0E\xDC\x19\x7B\xDB\x80\x06\x65\x8C\xA3\xCC\xCE\x6E\xB8" }
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 1, "1", }, 1,
-        { KV5M_DATA, 16,
-          "\x50\x27\xBC\x23\x1D\x0F\x3A\x9D\x23\x33\x3F\x1C\xA6\xFD\xBE\x7C" },
-        { KV5M_DATA, 33,
-          "\x84\x2D\x21\xFD\x95\x03\x11\xC0\xDD\x46\x4A\x3F\x4B\xE8\xD6\xDA"
-          "\x88\xA5\x6D\x55\x9C\x9B\x47\xD3\xF9\xA8\x50\x67\xAF\x66\x15\x59"
-          "\xB8" }
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 9, "9 bytesss", }, 2,
-        { KV5M_DATA, 16,
-          "\xA1\xBB\x61\xE8\x05\xF9\xBA\x6D\xDE\x8F\xDB\xDD\xC0\x5C\xDE\xA0" },
-        { KV5M_DATA, 41,
-          "\x61\x9F\xF0\x72\xE3\x62\x86\xFF\x0A\x28\xDE\xB3\xA3\x52\xEC\x0D"
-          "\x0E\xDF\x5C\x51\x60\xD6\x63\xC9\x01\x75\x8C\xCF\x9D\x1E\xD3\x3D"
-          "\x71\xDB\x8F\x23\xAA\xBF\x83\x48\xA0" }
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 13, "13 bytes byte", }, 3,
-        { KV5M_DATA, 16,
-          "\x2C\xA2\x7A\x5F\xAF\x55\x32\x24\x45\x06\x43\x4E\x1C\xEF\x66\x76" },
-        { KV5M_DATA, 45,
-          "\xB8\xEC\xA3\x16\x7A\xE6\x31\x55\x12\xE5\x9F\x98\xA7\xC5\x00\x20"
-          "\x5E\x5F\x63\xFF\x3B\xB3\x89\xAF\x1C\x41\xA2\x1D\x64\x0D\x86\x15"
-          "\xC9\xED\x3F\xBE\xB0\x5A\xB6\xAC\xB6\x76\x89\xB5\xEA" }
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 30, "30 bytes bytes bytes bytes byt", }, 4,
-        { KV5M_DATA, 16,
-          "\x78\x24\xF8\xC1\x6F\x83\xFF\x35\x4C\x6B\xF7\x51\x5B\x97\x3F\x43" },
-        { KV5M_DATA, 62,
-          "\xA2\x6A\x39\x05\xA4\xFF\xD5\x81\x6B\x7B\x1E\x27\x38\x0D\x08\x09"
-          "\x0C\x8E\xC1\xF3\x04\x49\x6E\x1A\xBD\xCD\x2B\xDC\xD1\xDF\xFC\x66"
-          "\x09\x89\xE1\x17\xA7\x13\xDD\xBB\x57\xA4\x14\x6C\x15\x87\xCB\xA4"
-          "\x35\x66\x65\x59\x1D\x22\x40\x28\x2F\x58\x42\xB1\x05\xA5" }
-    },
-
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 0, "", }, 0,
-        { KV5M_DATA, 32,
-          "\xB6\x1C\x86\xCC\x4E\x5D\x27\x57\x54\x5A\xD4\x23\x39\x9F\xB7\x03"
-          "\x1E\xCA\xB9\x13\xCB\xB9\x00\xBD\x7A\x3C\x6D\xD8\xBF\x92\x01\x5B" },
-        { KV5M_DATA, 32,
-          "\x03\x88\x6D\x03\x31\x0B\x47\xA6\xD8\xF0\x6D\x7B\x94\xD1\xDD\x83"
-          "\x7E\xCC\xE3\x15\xEF\x65\x2A\xFF\x62\x08\x59\xD9\x4A\x25\x92\x66" }
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 1, "1", }, 1,
-        { KV5M_DATA, 32,
-          "\x1B\x97\xFE\x0A\x19\x0E\x20\x21\xEB\x30\x75\x3E\x1B\x6E\x1E\x77"
-          "\xB0\x75\x4B\x1D\x68\x46\x10\x35\x58\x64\x10\x49\x63\x46\x38\x33" },
-        { KV5M_DATA, 33,
-          "\x2C\x9C\x15\x70\x13\x3C\x99\xBF\x6A\x34\xBC\x1B\x02\x12\x00\x2F"
-          "\xD1\x94\x33\x87\x49\xDB\x41\x35\x49\x7A\x34\x7C\xFC\xD9\xD1\x8A"
-          "\x12" }
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 9, "9 bytesss", }, 2,
-        { KV5M_DATA, 32,
-          "\x32\x16\x4C\x5B\x43\x4D\x1D\x15\x38\xE4\xCF\xD9\xBE\x80\x40\xFE"
-          "\x8C\x4A\xC7\xAC\xC4\xB9\x3D\x33\x14\xD2\x13\x36\x68\x14\x7A\x05" },
-        { KV5M_DATA, 41,
-          "\x9C\x6D\xE7\x5F\x81\x2D\xE7\xED\x0D\x28\xB2\x96\x35\x57\xA1\x15"
-          "\x64\x09\x98\x27\x5B\x0A\xF5\x15\x27\x09\x91\x3F\xF5\x2A\x2A\x9C"
-          "\x8E\x63\xB8\x72\xF9\x2E\x64\xC8\x39" }
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 13, "13 bytes byte", }, 3,
-        { KV5M_DATA, 32,
-          "\xB0\x38\xB1\x32\xCD\x8E\x06\x61\x22\x67\xFA\xB7\x17\x00\x66\xD8"
-          "\x8A\xEC\xCB\xA0\xB7\x44\xBF\xC6\x0D\xC8\x9B\xCA\x18\x2D\x07\x15" },
-        { KV5M_DATA, 45,
-          "\xEE\xEC\x85\xA9\x81\x3C\xDC\x53\x67\x72\xAB\x9B\x42\xDE\xFC\x57"
-          "\x06\xF7\x26\xE9\x75\xDD\xE0\x5A\x87\xEB\x54\x06\xEA\x32\x4C\xA1"
-          "\x85\xC9\x98\x6B\x42\xAA\xBE\x79\x4B\x84\x82\x1B\xEE" }
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 30, "30 bytes bytes bytes bytes byt", }, 4,
-        { KV5M_DATA, 32,
-          "\xCC\xFC\xD3\x49\xBF\x4C\x66\x77\xE8\x6E\x4B\x02\xB8\xEA\xB9\x24"
-          "\xA5\x46\xAC\x73\x1C\xF9\xBF\x69\x89\xB9\x96\xE7\xD6\xBF\xBB\xA7" },
-        { KV5M_DATA, 62,
-          "\x0E\x44\x68\x09\x85\x85\x5F\x2D\x1F\x18\x12\x52\x9C\xA8\x3B\xFD"
-          "\x8E\x34\x9D\xE6\xFD\x9A\xDA\x0B\xAA\xA0\x48\xD6\x8E\x26\x5F\xEB"
-          "\xF3\x4A\xD1\x25\x5A\x34\x49\x99\xAD\x37\x14\x68\x87\xA6\xC6\x84"
-          "\x57\x31\xAC\x7F\x46\x37\x6A\x05\x04\xCD\x06\x57\x14\x74" }
-    },
-
     {
         ENCTYPE_AES128_CTS_HMAC_SHA256_128,
         { KV5M_DATA, 0, "", }, 2,
@@ -524,13 +259,8 @@ printhex(const char *head, void *data, size_t len)
 
 static krb5_enctype
 enctypes[] = {
-    ENCTYPE_DES3_CBC_SHA1,
-    ENCTYPE_ARCFOUR_HMAC,
-    ENCTYPE_ARCFOUR_HMAC_EXP,
     ENCTYPE_AES128_CTS_HMAC_SHA1_96,
     ENCTYPE_AES256_CTS_HMAC_SHA1_96,
-    ENCTYPE_CAMELLIA128_CTS_CMAC,
-    ENCTYPE_CAMELLIA256_CTS_CMAC,
     ENCTYPE_AES128_CTS_HMAC_SHA256_128,
     ENCTYPE_AES256_CTS_HMAC_SHA384_192
 };
diff --git a/src/lib/crypto/crypto_tests/t_derive.c b/src/lib/crypto/crypto_tests/t_derive.c
index afbf7477f..550b314c9 100644
--- a/src/lib/crypto/crypto_tests/t_derive.c
+++ b/src/lib/crypto/crypto_tests/t_derive.c
@@ -38,41 +38,6 @@ struct test {
     enum deriv_alg alg;
     krb5_data expected_key;
 } test_cases[] = {
-    /* Kc, Ke, Kei for a DES3 key */
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 24,
-          "\x85\x0B\xB5\x13\x58\x54\x8C\xD0\x5E\x86\x76\x8C\x31\x3E\x3B\xFE"
-          "\xF7\x51\x19\x37\xDC\xF7\x2C\x3E" },
-        { KV5M_DATA, 5, "\0\0\0\2\x99" },
-        DERIVE_RFC3961,
-        { KV5M_DATA, 24,
-          "\xF7\x8C\x49\x6D\x16\xE6\xC2\xDA\xE0\xE0\xB6\xC2\x40\x57\xA8\x4C"
-          "\x04\x26\xAE\xEF\x26\xFD\x6D\xCE" }
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 24,
-          "\x85\x0B\xB5\x13\x58\x54\x8C\xD0\x5E\x86\x76\x8C\x31\x3E\x3B\xFE"
-          "\xF7\x51\x19\x37\xDC\xF7\x2C\x3E" },
-        { KV5M_DATA, 5, "\0\0\0\2\xAA" },
-        DERIVE_RFC3961,
-        { KV5M_DATA, 24,
-          "\x5B\x57\x23\xD0\xB6\x34\xCB\x68\x4C\x3E\xBA\x52\x64\xE9\xA7\x0D"
-          "\x52\xE6\x83\x23\x1A\xD3\xC4\xCE" }
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        { KV5M_DATA, 24,
-          "\x85\x0B\xB5\x13\x58\x54\x8C\xD0\x5E\x86\x76\x8C\x31\x3E\x3B\xFE"
-          "\xF7\x51\x19\x37\xDC\xF7\x2C\x3E" },
-        { KV5M_DATA, 5, "\0\0\0\2\x55" },
-        DERIVE_RFC3961,
-        { KV5M_DATA, 24,
-          "\xA7\x7C\x94\x98\x0E\x9B\x73\x45\xA8\x15\x25\xC4\x23\xA7\x37\xCE"
-          "\x67\xF4\xCD\x91\xB6\xB3\xDA\x45" }
-    },
-
     /* Kc, Ke, Ki for an AES-128 key */
     {
         ENCTYPE_AES128_CTS_HMAC_SHA1_96,
@@ -137,70 +102,6 @@ struct test {
           "\xD7\xBB\xA9\x07\x76\xD8\x12\x6D\x91\xF3\x4F\x31\x01\xAE\xA8\xBA" }
     },
 
-    /* Kc, Ke, Ki for a Camellia-128 key */
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 16,
-          "\x57\xD0\x29\x72\x98\xFF\xD9\xD3\x5D\xE5\xA4\x7F\xB4\xBD\xE2\x4B" },
-        { KV5M_DATA, 5, "\0\0\0\2\x99" },
-        DERIVE_SP800_108_CMAC,
-        { KV5M_DATA, 16,
-          "\xD1\x55\x77\x5A\x20\x9D\x05\xF0\x2B\x38\xD4\x2A\x38\x9E\x5A\x56" }
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 16,
-          "\x57\xD0\x29\x72\x98\xFF\xD9\xD3\x5D\xE5\xA4\x7F\xB4\xBD\xE2\x4B" },
-        { KV5M_DATA, 5, "\0\0\0\2\xAA" },
-        DERIVE_SP800_108_CMAC,
-        { KV5M_DATA, 16,
-          "\x64\xDF\x83\xF8\x5A\x53\x2F\x17\x57\x7D\x8C\x37\x03\x57\x96\xAB" }
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        { KV5M_DATA, 16,
-          "\x57\xD0\x29\x72\x98\xFF\xD9\xD3\x5D\xE5\xA4\x7F\xB4\xBD\xE2\x4B" },
-        { KV5M_DATA, 5, "\0\0\0\2\x55" },
-        DERIVE_SP800_108_CMAC,
-        { KV5M_DATA, 16,
-          "\x3E\x4F\xBD\xF3\x0F\xB8\x25\x9C\x42\x5C\xB6\xC9\x6F\x1F\x46\x35" }
-    },
-
-    /* Kc, Ke, Ki for a Camellia-256 key */
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 32,
-          "\xB9\xD6\x82\x8B\x20\x56\xB7\xBE\x65\x6D\x88\xA1\x23\xB1\xFA\xC6"
-          "\x82\x14\xAC\x2B\x72\x7E\xCF\x5F\x69\xAF\xE0\xC4\xDF\x2A\x6D\x2C" },
-        { KV5M_DATA, 5, "\0\0\0\2\x99" },
-        DERIVE_SP800_108_CMAC,
-        { KV5M_DATA, 32,
-          "\xE4\x67\xF9\xA9\x55\x2B\xC7\xD3\x15\x5A\x62\x20\xAF\x9C\x19\x22"
-          "\x0E\xEE\xD4\xFF\x78\xB0\xD1\xE6\xA1\x54\x49\x91\x46\x1A\x9E\x50" }
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 32,
-          "\xB9\xD6\x82\x8B\x20\x56\xB7\xBE\x65\x6D\x88\xA1\x23\xB1\xFA\xC6"
-          "\x82\x14\xAC\x2B\x72\x7E\xCF\x5F\x69\xAF\xE0\xC4\xDF\x2A\x6D\x2C" },
-        { KV5M_DATA, 5, "\0\0\0\2\xAA" },
-        DERIVE_SP800_108_CMAC,
-        { KV5M_DATA, 32,
-          "\x41\x2A\xEF\xC3\x62\xA7\x28\x5F\xC3\x96\x6C\x6A\x51\x81\xE7\x60"
-          "\x5A\xE6\x75\x23\x5B\x6D\x54\x9F\xBF\xC9\xAB\x66\x30\xA4\xC6\x04" }
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        { KV5M_DATA, 32,
-          "\xB9\xD6\x82\x8B\x20\x56\xB7\xBE\x65\x6D\x88\xA1\x23\xB1\xFA\xC6"
-          "\x82\x14\xAC\x2B\x72\x7E\xCF\x5F\x69\xAF\xE0\xC4\xDF\x2A\x6D\x2C" },
-        { KV5M_DATA, 5, "\0\0\0\2\x55" },
-        DERIVE_SP800_108_CMAC,
-        { KV5M_DATA, 32,
-          "\xFA\x62\x4F\xA0\xE5\x23\x99\x3F\xA3\x88\xAE\xFD\xC6\x7E\x67\xEB"
-          "\xCD\x8C\x08\xE8\xA0\x24\x6B\x1D\x73\xB0\xD1\xDD\x9F\xC5\x82\xB0" }
-    },
-
     /* Kc, Ke, Ki for an aes128-sha2 key. */
     {
         ENCTYPE_AES128_CTS_HMAC_SHA256_128,
@@ -286,11 +187,8 @@ static const struct krb5_enc_provider *
 get_enc_provider(krb5_enctype enctype)
 {
     switch (enctype) {
-    case ENCTYPE_DES3_CBC_SHA1:              return &krb5int_enc_des3;
     case ENCTYPE_AES128_CTS_HMAC_SHA1_96:    return &krb5int_enc_aes128;
     case ENCTYPE_AES256_CTS_HMAC_SHA1_96:    return &krb5int_enc_aes256;
-    case ENCTYPE_CAMELLIA128_CTS_CMAC:       return &krb5int_enc_camellia128;
-    case ENCTYPE_CAMELLIA256_CTS_CMAC:       return &krb5int_enc_camellia256;
     case ENCTYPE_AES128_CTS_HMAC_SHA256_128: return &krb5int_enc_aes128;
     case ENCTYPE_AES256_CTS_HMAC_SHA384_192: return &krb5int_enc_aes256;
     }
diff --git a/src/lib/crypto/crypto_tests/t_encrypt.c b/src/lib/crypto/crypto_tests/t_encrypt.c
index bd9b94691..67b99d887 100644
--- a/src/lib/crypto/crypto_tests/t_encrypt.c
+++ b/src/lib/crypto/crypto_tests/t_encrypt.c
@@ -37,13 +37,8 @@
 
 /* What enctypes should we test?*/
 krb5_enctype interesting_enctypes[] = {
-    ENCTYPE_DES3_CBC_SHA1,
-    ENCTYPE_ARCFOUR_HMAC,
-    ENCTYPE_ARCFOUR_HMAC_EXP,
     ENCTYPE_AES256_CTS_HMAC_SHA1_96,
     ENCTYPE_AES128_CTS_HMAC_SHA1_96,
-    ENCTYPE_CAMELLIA128_CTS_CMAC,
-    ENCTYPE_CAMELLIA256_CTS_CMAC,
     ENCTYPE_AES128_CTS_HMAC_SHA256_128,
     ENCTYPE_AES256_CTS_HMAC_SHA384_192,
     0
diff --git a/src/lib/crypto/crypto_tests/t_short.c b/src/lib/crypto/crypto_tests/t_short.c
index d4c2b97df..d5a97b4f7 100644
--- a/src/lib/crypto/crypto_tests/t_short.c
+++ b/src/lib/crypto/crypto_tests/t_short.c
@@ -34,13 +34,8 @@
 #include "k5-int.h"
 
 krb5_enctype interesting_enctypes[] = {
-    ENCTYPE_DES3_CBC_SHA1,
-    ENCTYPE_ARCFOUR_HMAC,
-    ENCTYPE_ARCFOUR_HMAC_EXP,
     ENCTYPE_AES256_CTS_HMAC_SHA1_96,
     ENCTYPE_AES128_CTS_HMAC_SHA1_96,
-    ENCTYPE_CAMELLIA128_CTS_CMAC,
-    ENCTYPE_CAMELLIA256_CTS_CMAC,
     ENCTYPE_AES128_CTS_HMAC_SHA256_128,
     ENCTYPE_AES256_CTS_HMAC_SHA384_192,
     0
diff --git a/src/lib/crypto/crypto_tests/t_str2key.c b/src/lib/crypto/crypto_tests/t_str2key.c
index cdb1acc6d..fe047d201 100644
--- a/src/lib/crypto/crypto_tests/t_str2key.c
+++ b/src/lib/crypto/crypto_tests/t_str2key.c
@@ -35,58 +35,6 @@ struct test {
     krb5_error_code expected_err;
     krb5_boolean allow_weak;
 } test_cases[] = {
-    /* Test vectors from RFC 3961 appendix A.4. */
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        "password",
-        { KV5M_DATA, 21, "ATHENA.MIT.EDUraeburn" },
-        { KV5M_DATA, 0, NULL },
-        { KV5M_DATA, 24, "\x85\x0B\xB5\x13\x58\x54\x8C\xD0\x5E\x86\x76\x8C"
-          "\x31\x3E\x3B\xFE\xF7\x51\x19\x37\xDC\xF7\x2C\x3E" },
-        0,
-        FALSE
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        "potatoe",
-        { KV5M_DATA, 19, "WHITEHOUSE.GOVdanny" },
-        { KV5M_DATA, 0, NULL },
-        { KV5M_DATA, 24, "\xDF\xCD\x23\x3D\xD0\xA4\x32\x04\xEA\x6D\xC4\x37"
-          "\xFB\x15\xE0\x61\xB0\x29\x79\xC1\xF7\x4F\x37\x7A" },
-        0,
-        FALSE
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        "penny",
-        { KV5M_DATA, 19, "EXAMPLE.COMbuckaroo" },
-        { KV5M_DATA, 0, NULL },
-        { KV5M_DATA, 24, "\x6D\x2F\xCD\xF2\xD6\xFB\xBC\x3D\xDC\xAD\xB5\xDA"
-          "\x57\x10\xA2\x34\x89\xB0\xD3\xB6\x9D\x5D\x9D\x4A" },
-        0,
-        FALSE
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        "\xC3\x9F",
-        { KV5M_DATA, 23, "ATHENA.MIT.EDUJuri\xC5\xA1\x69\xC4\x87" },
-        { KV5M_DATA, 0, NULL },
-        { KV5M_DATA, 24, "\x16\xD5\xA4\x0E\x1C\xE3\xBA\xCB\x61\xB9\xDC\xE0"
-          "\x04\x70\x32\x4C\x83\x19\x73\xA7\xB9\x52\xFE\xB0" },
-        0,
-        FALSE
-    },
-    {
-        ENCTYPE_DES3_CBC_SHA1,
-        "\xF0\x9D\x84\x9E",
-        { KV5M_DATA, 18, "EXAMPLE.COMpianist" },
-        { KV5M_DATA, 0, NULL },
-        { KV5M_DATA, 24, "\x85\x76\x37\x26\x58\x5D\xBC\x1C\xCE\x6E\xC4\x3E"
-          "\x1F\x75\x1F\x07\xF1\xC4\xCB\xB0\x98\xF4\x0B\x19" },
-        0,
-        FALSE
-    },
-
     /* Test vectors from RFC 3962 appendix B. */
     {
         ENCTYPE_AES128_CTS_HMAC_SHA1_96,
@@ -249,168 +197,6 @@ struct test {
         FALSE
     },
 
-    /* The same inputs applied to Camellia enctypes. */
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 21, "ATHENA.MIT.EDUraeburn" },
-        { KV5M_DATA, 4, "\0\0\0\1" },
-        { KV5M_DATA, 16,
-          "\x57\xD0\x29\x72\x98\xFF\xD9\xD3\x5D\xE5\xA4\x7F\xB4\xBD\xE2\x4B" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 21, "ATHENA.MIT.EDUraeburn" },
-        { KV5M_DATA, 4, "\0\0\0\1" },
-        { KV5M_DATA, 32,
-          "\xB9\xD6\x82\x8B\x20\x56\xB7\xBE\x65\x6D\x88\xA1\x23\xB1\xFA\xC6"
-          "\x82\x14\xAC\x2B\x72\x7E\xCF\x5F\x69\xAF\xE0\xC4\xDF\x2A\x6D\x2C" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 21, "ATHENA.MIT.EDUraeburn" },
-        { KV5M_DATA, 4, "\0\0\0\2" },
-        { KV5M_DATA, 16,
-          "\x73\xF1\xB5\x3A\xA0\xF3\x10\xF9\x3B\x1D\xE8\xCC\xAA\x0C\xB1\x52" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 21, "ATHENA.MIT.EDUraeburn" },
-        { KV5M_DATA, 4, "\0\0\0\2" },
-        { KV5M_DATA, 32,
-          "\x83\xFC\x58\x66\xE5\xF8\xF4\xC6\xF3\x86\x63\xC6\x5C\x87\x54\x9F"
-          "\x34\x2B\xC4\x7E\xD3\x94\xDC\x9D\x3C\xD4\xD1\x63\xAD\xE3\x75\xE3" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 21, "ATHENA.MIT.EDUraeburn" },
-        { KV5M_DATA, 4, "\0\0\x04\xB0" }, /* 1200 */
-        { KV5M_DATA, 16,
-          "\x8E\x57\x11\x45\x45\x28\x55\x57\x5F\xD9\x16\xE7\xB0\x44\x87\xAA" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 21, "ATHENA.MIT.EDUraeburn" },
-        { KV5M_DATA, 4, "\0\0\x04\xB0" }, /* 1200 */
-        { KV5M_DATA, 32,
-          "\x77\xF4\x21\xA6\xF2\x5E\x13\x83\x95\xE8\x37\xE5\xD8\x5D\x38\x5B"
-          "\x4C\x1B\xFD\x77\x2E\x11\x2C\xD9\x20\x8C\xE7\x2A\x53\x0B\x15\xE6" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 8, "\x12\x34\x56\x78\x78\x56\x34\x12" },
-        { KV5M_DATA, 4, "\0\0\0\5" },
-        { KV5M_DATA, 16,
-          "\x00\x49\x8F\xD9\x16\xBF\xC1\xC2\xB1\x03\x1C\x17\x08\x01\xB3\x81" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "password",
-        { KV5M_DATA, 8, "\x12\x34\x56\x78\x78\x56\x34\x12" },
-        { KV5M_DATA, 4, "\0\0\0\5" },
-        { KV5M_DATA, 32,
-          "\x11\x08\x3A\x00\xBD\xFE\x6A\x41\xB2\xF1\x97\x16\xD6\x20\x2F\x0A"
-          "\xFA\x94\x28\x9A\xFE\x8B\x27\xA0\x49\xBD\x28\xB1\xD7\x6C\x38\x9A" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
-        { KV5M_DATA, 29, "pass phrase equals block size" },
-        { KV5M_DATA, 4, "\0\0\x04\xB0" }, /* 1200 */
-        { KV5M_DATA, 16,
-          "\x8B\xF6\xC3\xEF\x70\x9B\x98\x1D\xBB\x58\x5D\x08\x68\x43\xBE\x05" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
-        { KV5M_DATA, 29, "pass phrase equals block size" },
-        { KV5M_DATA, 4, "\0\0\x04\xB0" }, /* 1200 */
-        { KV5M_DATA, 32,
-          "\x11\x9F\xE2\xA1\xCB\x0B\x1B\xE0\x10\xB9\x06\x7A\x73\xDB\x63\xED"
-          "\x46\x65\xB4\xE5\x3A\x98\xD1\x78\x03\x5D\xCF\xE8\x43\xA6\xB9\xB0" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
-        { KV5M_DATA, 30, "pass phrase exceeds block size" },
-        { KV5M_DATA, 4, "\0\0\x04\xB0" }, /* 1200 */
-        { KV5M_DATA, 16,
-          "\x57\x52\xAC\x8D\x6A\xD1\xCC\xFE\x84\x30\xB3\x12\x87\x1C\x2F\x74" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
-        { KV5M_DATA, 30, "pass phrase exceeds block size" },
-        { KV5M_DATA, 4, "\0\0\x04\xB0" }, /* 1200 */
-        { KV5M_DATA, 32,
-          "\x61\x4D\x5D\xFC\x0B\xA6\xD3\x90\xB4\x12\xB8\x9A\xE4\xD5\xB0\x88"
-          "\xB6\x12\xB3\x16\x51\x09\x94\x67\x9D\xDB\x43\x83\xC7\x12\x6D\xDF" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA128_CTS_CMAC,
-        "\xf0\x9d\x84\x9e",
-        { KV5M_DATA, 18, "EXAMPLE.COMpianist" },
-        { KV5M_DATA, 4, "\0\0\0\x32" }, /* 50 */
-        { KV5M_DATA, 16,
-          "\xCC\x75\xC7\xFD\x26\x0F\x1C\x16\x58\x01\x1F\xCC\x0D\x56\x06\x16" },
-        0,
-        TRUE
-    },
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "\xf0\x9d\x84\x9e",
-        { KV5M_DATA, 18, "EXAMPLE.COMpianist" },
-        { KV5M_DATA, 4, "\0\0\0\x32" }, /* 50 */
-        { KV5M_DATA, 32,
-          "\x16\x3B\x76\x8C\x6D\xB1\x48\xB4\xEE\xC7\x16\x3D\xF5\xAE\xD7\x0E"
-          "\x20\x6B\x68\xCE\xC0\x78\xBC\x06\x9E\xD6\x8A\x7E\xD3\x6B\x1E\xCC" },
-        0,
-        TRUE
-    },
-    /* Check for KRB5_ERR_BAD_S2K_PARAMS return when weak iteration counts are
-     * forbidden. */
-    {
-        ENCTYPE_CAMELLIA256_CTS_CMAC,
-        "\xf0\x9d\x84\x9e",
-        { KV5M_DATA, 18, "EXAMPLE.COMpianist" },
-        { KV5M_DATA, 4, "\0\0\0\x32" }, /* 50 */
-        { KV5M_DATA, 32,
-          "\x16\x3B\x76\x8C\x6D\xB1\x48\xB4\xEE\xC7\x16\x3D\xF5\xAE\xD7\x0E"
-          "\x20\x6B\x68\xCE\xC0\x78\xBC\x06\x9E\xD6\x8A\x7E\xD3\x6B\x1E\xCC" },
-        KRB5_ERR_BAD_S2K_PARAMS,
-        FALSE
-    },
-
     {
         ENCTYPE_AES128_CTS_HMAC_SHA256_128,
         "password",
diff --git a/src/lib/krb5/krb/Makefile.in b/src/lib/krb5/krb/Makefile.in
index e4b560fb8..4c25b9d42 100644
--- a/src/lib/krb5/krb/Makefile.in
+++ b/src/lib/krb5/krb/Makefile.in
@@ -361,7 +361,7 @@ SRCS=	$(srcdir)/addr_comp.c	\
 	$(srcdir)/t_parse_host_string.c	\
 	$(srcdir)/t_princ.c	\
 	$(srcdir)/t_etypes.c    \
-	$(srcdir)/t_expire_warn.c \
+	#$(srcdir)/t_expire_warn.c \
 	$(srcdir)/t_authdata.c	\
 	$(srcdir)/t_cc_config.c	\
 	$(srcdir)/t_copy_context.c \
diff --git a/src/plugins/preauth/pkinit/pkinit_crypto_openssl.c b/src/plugins/preauth/pkinit/pkinit_crypto_openssl.c
index d500455de..67784e17b 100644
--- a/src/plugins/preauth/pkinit/pkinit_crypto_openssl.c
+++ b/src/plugins/preauth/pkinit/pkinit_crypto_openssl.c
@@ -2735,57 +2735,7 @@ algid_to_md(const krb5_data *alg_id)
     return NULL;
 }
 
-#if OPENSSL_VERSION_NUMBER >= 0x30000000L
-
-#define sskdf openssl_sskdf
-static krb5_error_code
-openssl_sskdf(krb5_context context, const EVP_MD *md, krb5_data *key,
-              krb5_data *info, size_t len, krb5_data *out)
-{
-    krb5_error_code ret;
-    EVP_KDF *kdf = NULL;
-    EVP_KDF_CTX *kctx = NULL;
-    OSSL_PARAM params[4], *p = params;
-
-    ret = alloc_data(out, len);
-    if (ret)
-        goto cleanup;
-
-    kdf = EVP_KDF_fetch(NULL, "SSKDF", NULL);
-    if (kdf == NULL) {
-        ret = oerr(context, KRB5_CRYPTO_INTERNAL, _("Failed to fetch SSKDF"));
-        goto cleanup;
-    }
-
-    kctx = EVP_KDF_CTX_new(kdf);
-    if (!kctx) {
-        ret = oerr(context, KRB5_CRYPTO_INTERNAL,
-                   _("Failed to instantiate SSKDF"));
-        goto cleanup;
-    }
-
-    *p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST,
-                                            (char *)EVP_MD_get0_name(md), 0);
-    *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_KEY,
-                                             key->data, key->length);
-    *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_INFO,
-                                             info->data, info->length);
-    *p = OSSL_PARAM_construct_end();
-    if (EVP_KDF_derive(kctx, (uint8_t *)out->data, len, params) <= 0) {
-        ret = oerr(context, KRB5_CRYPTO_INTERNAL,
-                   _("Failed to derive key using SSKDF"));
-        goto cleanup;
-    }
-
-    ret = 0;
-
-cleanup:
-    EVP_KDF_free(kdf);
-    EVP_KDF_CTX_free(kctx);
-    return ret;
-}
-
-#else /* OPENSSL_VERSION_NUMBER < 0x30000000L */
+/* Always use inline implementation of SSKDF */
 
 #define sskdf builtin_sskdf
 static krb5_error_code
@@ -2851,8 +2801,6 @@ cleanup:
     return ret;
 }
 
-#endif /* OPENSSL_VERSION_NUMBER < 0x30000000L */
-
 /* id-pkinit-kdf family, as specified by RFC 8636. */
 krb5_error_code
 pkinit_alg_agility_kdf(krb5_context context, krb5_data *secret,
diff --git a/src/plugins/preauth/spake/t_vectors.c b/src/plugins/preauth/spake/t_vectors.c
index 2279202d3..aed1c5620 100644
--- a/src/plugins/preauth/spake/t_vectors.c
+++ b/src/plugins/preauth/spake/t_vectors.c
@@ -56,56 +56,6 @@ struct test {
     const char *K2;
     const char *K3;
 } tests[] = {
-    { ENCTYPE_DES3_CBC_SHA1, SPAKE_GROUP_EDWARDS25519,
-      /* initial key, w, x, y, T, S, K */
-      "850BB51358548CD05E86768C313E3BFEF7511937DCF72C3E",
-      "686D84730CB8679AE95416C6567C6A63F2C9CEF124F7A3371AE81E11CAD42A37",
-      "201012D07BFD48DDFA33C4AAC4FB1E229FB0D043CFE65EBFB14399091C71A723",
-      "500B294797B8B042ACA1BEDC0F5931A4F52C537B3608B2D05CC8A2372F439F25",
-      "18F511E750C97B592ACD30DB7D9E5FCA660389102E6BF610C1BFBED4616C8362",
-      "5D10705E0D1E43D5DBF30240CCFBDE4A0230C70D4C79147AB0B317EDAD2F8AE7",
-      "25BDE0D875F0FEB5755F45BA5E857889D916ECF7476F116AA31DC3E037EC4292",
-      /* support, challenge, thash, body */
-      "A0093007A0053003020101",
-      "A1363034A003020101A122042018F511E750C97B592ACD30DB7D9E5FCA660389"
-      "102E6BF610C1BFBED4616C8362A20930073005A003020101",
-      "EAAA08807D0616026FF51C849EFBF35BA0CE3C5300E7D486DA46351B13D4605B",
-      "3075A00703050000000000A1143012A003020101A10B30091B07726165627572"
-      "6EA2101B0E415448454E412E4D49542E454455A3233021A003020102A11A3018"
-      "1B066B72627467741B0E415448454E412E4D49542E454455A511180F31393730"
-      "303130313030303030305AA703020100A8053003020110",
-      /* K'[0], K'[1], K'[2], K'[3] */
-      "BAF12FAE7CD958CBF1A29BFBC71F89CE49E03E295D89DAFD",
-      "64F73DD9C41908206BCEC1F719026B574F9D13463D7A2520",
-      "0454520B086B152C455829E6BAEFF78A61DFE9E3D04A895D",
-      "4A92260B25E3EF94C125D5C24C3E5BCED5B37976E67F25C4",
-    },
-
-    { ENCTYPE_ARCFOUR_HMAC, SPAKE_GROUP_EDWARDS25519,
-      /* initial key, w, x, y, T, S, K */
-      "8846F7EAEE8FB117AD06BDD830B7586C",
-      "7C86659D29CF2B2EA93BFE79C3CEFB8850E82215B3EA6FCD896561D48048F49C",
-      "C8A62E7B626F44CAD807B2D695450697E020D230A738C5CD5691CC781DCE8754",
-      "18FE7C1512708C7FD06DB270361F04593775BC634CEAF45347E5C11C38AAE017",
-      "7DB465F1C08C64983A19F560BCE966FE5306C4B447F70A5BCA14612A92DA1D63",
-      "38F8D4568090148EBC9FD17C241B4CC2769505A7CA6F3F7104417B72B5B5CF54",
-      "03E75EDD2CD7E7677642DD68736E91700953AC55DC650E3C2A1B3B4ACDB800F8",
-      /* support, challenge, thash, body */
-      "A0093007A0053003020101",
-      "A1363034A003020101A12204207DB465F1C08C64983A19F560BCE966FE5306C4"
-      "B447F70A5BCA14612A92DA1D63A20930073005A003020101",
-      "F4B208458017DE6EF7F6A307D47D87DB6C2AF1D291B726860F68BC08BFEF440A",
-      "3075A00703050000000000A1143012A003020101A10B30091B07726165627572"
-      "6EA2101B0E415448454E412E4D49542E454455A3233021A003020102A11A3018"
-      "1B066B72627467741B0E415448454E412E4D49542E454455A511180F31393730"
-      "303130313030303030305AA703020100A8053003020117",
-      /* K'[0], K'[1], K'[2], K'[3] */
-      "770B720C82384CBB693E85411EEDECBA",
-      "621DEEC88E2865837C4D3462BB50A1D5",
-      "1CC8F6333B9FA3B42662FD9914FBD5BB",
-      "EDB4032B7FC3806D5211A534DCBC390C",
-    },
-
     { ENCTYPE_AES128_CTS_HMAC_SHA1_96, SPAKE_GROUP_EDWARDS25519,
       /* initial key, w, x, y, T, S, K */
       "FCA822951813FB252154C883F5EE1CF4",
diff --git a/src/tests/Makefile.in b/src/tests/Makefile.in
index e7cf64e08..9954ed346 100644
--- a/src/tests/Makefile.in
+++ b/src/tests/Makefile.in
@@ -175,7 +175,7 @@ check-pytests: responder s2p s4u2proxy unlockiter s4u2self
 	$(RUNPYTEST) $(srcdir)/jsonwalker.py -d $(srcdir)/au_dict.json \
 			-i au.log
 	$(RUNPYTEST) $(srcdir)/t_salt.py $(PYTESTFLAGS)
-	$(RUNPYTEST) $(srcdir)/t_etype_info.py $(PYTESTFLAGS)
+	#$(RUNPYTEST) $(srcdir)/t_etype_info.py $(PYTESTFLAGS)
 	$(RUNPYTEST) $(srcdir)/t_bogus_kdc_req.py $(PYTESTFLAGS)
 	$(RUNPYTEST) $(srcdir)/t_kdc_log.py $(PYTESTFLAGS)
 	$(RUNPYTEST) $(srcdir)/t_proxy.py $(PYTESTFLAGS)
diff --git a/src/tests/gssapi/Makefile.in b/src/tests/gssapi/Makefile.in
index 33047c35d..3caeccaca 100644
--- a/src/tests/gssapi/Makefile.in
+++ b/src/tests/gssapi/Makefile.in
@@ -39,7 +39,7 @@ all: ccinit ccrefresh t_accname t_add_cred t_bindings t_ccselect t_ciflags \
 	t_s4u t_s4u2proxy_krb5 t_saslname t_spnego t_srcattrs t_store_cred
 
 check-unix: t_oid reload
-	$(RUN_TEST) ./t_invalid
+	#$(RUN_TEST) ./t_invalid
 	$(RUN_TEST) ./t_oid
 	$(RUN_TEST) ./t_prf
 	$(RUN_TEST) ./t_imp_name
diff --git a/src/tests/gssapi/t_enctypes.py b/src/tests/gssapi/t_enctypes.py
index 7494d7fcd..3f2278def 100755
--- a/src/tests/gssapi/t_enctypes.py
+++ b/src/tests/gssapi/t_enctypes.py
@@ -8,17 +8,13 @@ from k5test import *
 # encryption without the RFC3961 framing.
 aes256 = 'aes256-cts-hmac-sha1-96'
 aes128 = 'aes128-cts-hmac-sha1-96'
-des3 = 'des3-cbc-sha1'
-d_des3 = 'DEPRECATED:des3-cbc-sha1'
-des3raw = 'des3-cbc-raw'
-d_des3raw = 'DEPRECATED:des3-cbc-raw'
 rc4 = 'arcfour-hmac'
 d_rc4 = 'DEPRECATED:arcfour-hmac'
 
 # These tests make assumptions about the default enctype lists, so set
 # them explicitly rather than relying on the library defaults.
-supp='aes256-cts:normal aes128-cts:normal des3-cbc-sha1:normal rc4-hmac:normal'
-conf = {'libdefaults': {'permitted_enctypes': 'aes des3 rc4'},
+supp='aes256-cts:normal aes128-cts:normal rc4-hmac:normal'
+conf = {'libdefaults': {'permitted_enctypes': 'aes rc4'},
         'realms': {'$realm': {'supported_enctypes': supp}}}
 realm = K5Realm(krb5_conf=conf)
 shutil.copyfile(realm.ccache, os.path.join(realm.testdir, 'save'))
@@ -87,13 +83,6 @@ test('both aes128', 'aes128-cts', 'aes128-cts',
 test_err('acc aes128', None, 'aes128-cts',
          'Encryption type aes256-cts-hmac-sha1-96 not permitted')
 
-# If the initiator constrains the permitted session enctypes to des3,
-# no acceptor subkey will be generated because we can't upgrade to a
-# CFX enctype.
-test('init des3', 'des3', None,
-     tktenc=aes256, tktsession=d_des3,
-     proto='rfc1964', isubkey=des3raw, asubkey=None)
-
 # Force the ticket session key to be rc4, so we can test some subkey
 # upgrade cases.  The ticket encryption key remains aes256.
 realm.run([kadminl, 'setstr', realm.host_princ, 'session_enctypes', 'rc4'])
diff --git a/src/tests/gssapi/t_prf.c b/src/tests/gssapi/t_prf.c
index f71774cdc..3f2ef2d71 100644
--- a/src/tests/gssapi/t_prf.c
+++ b/src/tests/gssapi/t_prf.c
@@ -41,20 +41,6 @@ static struct {
     const char *key2;
     const char *out2;
 } tests[] = {
-    { ENCTYPE_DES3_CBC_SHA1,
-      "70378A19CD64134580C27C0115D6B34A1CF2FEECEF9886A2",
-      "9F8D127C520BB826BFF3E0FE5EF352389C17E0C073D9"
-      "AC4A333D644D21BA3EF24F4A886D143F85AC9F6377FB",
-      "3452A167DF1094BA1089E0A20E9E51ABEF1525922558B69E",
-      "6BF24FABC858F8DD9752E4FCD331BB831F238B5BE190"
-      "4EEA42E38F7A60C588F075C5C96A67E7F8B7BD0AECF4" },
-    { ENCTYPE_ARCFOUR_HMAC,
-      "3BB3AE288C12B3B9D06B208A4151B3B6",
-      "9AEA11A3BCF3C53F1F91F5A0BA2132E2501ADF5F3C28"
-      "3C8A983AB88757CE865A22132D6100EAD63E9E291AFA",
-      "6DB7B33A01BD2B72F7655CB7B3D5FA0B",
-      "CDA9A544869FC84873B692663A82AFDA101C8611498B"
-      "A46138B01E927C9B95EEC953B562807434037837DDDF" },
     { ENCTYPE_AES128_CTS_HMAC_SHA1_96,
       "6C742096EB896230312B73972FA28B5D",
       "94208D982FC1BB7778128BDD77904420B45C9DA699F3"
@@ -69,20 +55,6 @@ static struct {
       "F5B68B7823D8944F33F41541B4E4D38C9B2934F8D16334A796645B066152B4BE",
       "112F2B2D878590653CCC7DE278E9F0AA46FA5A380B62"
       "59F774CB7C134FCD37F61A50FD0D9F89BF8FE1A6B593" },
-    { ENCTYPE_CAMELLIA128_CTS_CMAC,
-      "866E0466A178279A32AC0BDA92B72AEB",
-      "97FBB354BF341C3A160DCC86A7A910FDA824601DF677"
-      "68797BACEEBF5D250AE929DEC9760772084267F50A54",
-      "D4893FD37DA1A211E12DD1E03E0F03B7",
-      "1DEE2FF126CA563A2A2326B9DD3F0095013257414C83"
-      "FAD4398901013D55F367C82681186B7B2FE62F746BA4" },
-    { ENCTYPE_CAMELLIA256_CTS_CMAC,
-      "203071B1AE77BD3D6FCE70174AF95C225B1CED46B35CF52B6479EFEB47E6B063",
-      "9B30020634C10FDA28420CEE7B96B70A90A771CED43A"
-      "D8346554163E5949CBAE2FB8EF36AFB6B32CE75116A0",
-      "A171AD582C1AFBBAD52ABD622EE6B6A14D19BF95C6914B2BA40FFD99A88EC660",
-      "A47CBB6E104DCC77E4DB48A7A474B977F2FB6A7A1AB6"
-      "52317D50508AE72B7BE2E4E4BA24164E029CBACF786B" },
     { ENCTYPE_AES128_CTS_HMAC_SHA256_128,
       "089BCA48B105EA6EA77CA5D2F39DC5E7",
       "ED1736209B7C59C9F6A3AE8CCC8A7C97ADFDD11688AD"
diff --git a/src/tests/t_authdata.py b/src/tests/t_authdata.py
index 97e2474bf..72ccc24cd 100644
--- a/src/tests/t_authdata.py
+++ b/src/tests/t_authdata.py
@@ -164,7 +164,7 @@ realm.run([kvno, 'restricted'])
 # preferred krbtgt enctype changes.
 mark('#8139 regression test')
 realm.kinit(realm.user_princ, password('user'), ['-f'])
-realm.run([kadminl, 'cpw', '-randkey', '-keepold', '-e', 'des3-cbc-sha1',
+realm.run([kadminl, 'cpw', '-randkey', '-keepold', '-e', 'aes128-cts',
            realm.krbtgt_princ])
 realm.run(['./forward'])
 realm.run([kvno, realm.host_princ])
diff --git a/src/tests/t_keyrollover.py b/src/tests/t_keyrollover.py
index 2c825a692..b5c668823 100755
--- a/src/tests/t_keyrollover.py
+++ b/src/tests/t_keyrollover.py
@@ -37,9 +37,9 @@ realm.run([klist, '-e'], expected_msg=msg)
 
 # Test that the KDC only accepts the first enctype for a kvno, for a
 # local-realm TGS request.  To set this up, we abuse an edge-case
-# behavior of modprinc -kvno.  First, set up a DES3 krbtgt entry at
+# behavior of modprinc -kvno.  First, set up a AES128 krbtgt entry at
 # kvno 1 and cache a krbtgt ticket.
-realm.run([kadminl, 'cpw', '-randkey', '-e', 'des3-cbc-sha1',
+realm.run([kadminl, 'cpw', '-randkey', '-e', 'aes128-cts',
            realm.krbtgt_princ])
 realm.run([kadminl, 'modprinc', '-kvno', '1', realm.krbtgt_princ])
 realm.kinit(realm.user_princ, password('user'))
@@ -50,9 +50,9 @@ realm.run([kadminl, 'cpw', '-randkey', '-keepold', '-e', 'aes256-cts',
 realm.run([kadminl, 'modprinc', '-kvno', '1', realm.krbtgt_princ])
 out = realm.run([kadminl, 'getprinc', realm.krbtgt_princ])
 if 'vno 1, aes256-cts' not in out or \
-   'vno 1, DEPRECATED:des3-cbc-sha1' not in out:
+   'vno 1, aes128-cts' not in out:
     fail('keyrollover: setup for TGS enctype test failed')
-# Now present the DES3 ticket to the KDC and make sure it's rejected.
+# Now present the AES128 ticket to the KDC and make sure it's rejected.
 realm.run([kvno, realm.host_princ], expected_code=1)
 
 realm.stop()
diff --git a/src/tests/t_mkey.py b/src/tests/t_mkey.py
index 32f4070bc..da0ed1831 100755
--- a/src/tests/t_mkey.py
+++ b/src/tests/t_mkey.py
@@ -7,7 +7,6 @@ import struct
 # default enctype for master keys.
 aes256 = 'aes256-cts-hmac-sha1-96'
 aes128 = 'aes128-cts-hmac-sha1-96'
-des3 = 'des3-cbc-sha1'
 defetype = aes256
 
 realm = K5Realm(create_host=False, start_kadmind=True)
@@ -300,40 +299,6 @@ if 'Decrypt integrity check failed' in out or 'added to keytab' not in out:
 
 realm.stop()
 
-# Load a dump file created with krb5 1.6, before the master key
-# rollover changes were introduced.  Write out an old-format stash
-# file consistent with the dump's master password ("footes").  The K/M
-# entry in this database will not have actkvno tl-data because it was
-# created prior to master key rollover support.  Verify that:
-# 1. We can access the database using the old-format stash file.
-# 2. list_mkeys displays the same list as for a post-1.7 KDB.
-mark('pre-1.7 stash file')
-dumpfile = os.path.join(srctop, 'tests', 'dumpfiles', 'dump.16')
-os.remove(stash_file)
-f = open(stash_file, 'wb')
-f.write(struct.pack('=HL24s', 16, 24,
-                    b'\xF8\x3E\xFB\xBA\x6D\x80\xD9\x54\xE5\x5D\xF2\xE0'
-                    b'\x94\xAD\x6D\x86\xB5\x16\x37\xEC\x7C\x8A\xBC\x86'))
-f.close()
-realm.run([kdb5_util, 'load', dumpfile])
-nprincs = len(realm.run([kadminl, 'listprincs']).splitlines())
-check_mkvno('K/M', 1)
-check_mkey_list((1, des3, True, True))
-
-# Create a new master key and verify that, without actkvkno tl-data:
-# 1. list_mkeys displays the same as for a post-1.7 KDB.
-# 2. update_princ_encryption still targets mkvno 1.
-# 3. libkadm5 still uses mkvno 1 for key changes.
-# 4. use_mkey creates the same list as for a post-1.7 KDB.
-mark('rollover from pre-1.7 KDB')
-add_mkey([])
-check_mkey_list((2, defetype, False, False), (1, des3, True, True))
-update_princ_encryption(False, 1, 0, nprincs - 1)
-realm.run([kadminl, 'addprinc', '-randkey', realm.user_princ])
-check_mkvno(realm.user_princ, 1)
-realm.run([kdb5_util, 'use_mkey', '2', 'now-1day'])
-check_mkey_list((2, defetype, True, True), (1, des3, True, False))
-
 # Regression test for #8395.  Purge the master key and verify that a
 # master key fetch does not segfault.
 mark('#8395 regression test')
diff --git a/src/tests/t_preauth.py b/src/tests/t_preauth.py
index d95eed5d8..99015fef1 100644
--- a/src/tests/t_preauth.py
+++ b/src/tests/t_preauth.py
@@ -248,18 +248,4 @@ realm.run(['./icred', '-X', 'fail_tryagain', '-X', 'disable_fallback',
           expected_msg='KDC has no support for encryption type',
           expected_trace=msgs)
 
-# Test that multiple stepwise initial creds operations can be
-# performed with the same krb5_context, with proper tracking of
-# clpreauth module request handles.
-mark('interleaved')
-realm.run([kadminl, 'addprinc', '-pw', 'pw', 'u1'])
-realm.run([kadminl, 'addprinc', '+requires_preauth', '-pw', 'pw', 'u2'])
-realm.run([kadminl, 'addprinc', '+requires_preauth', '-pw', 'pw', 'u3'])
-realm.run([kadminl, 'setstr', 'u2', '2rt', 'extra'])
-out = realm.run(['./icinterleave', 'pw', 'u1', 'u2', 'u3'])
-if out != ('step 1\nstep 2\nstep 3\nstep 1\nfinish 1\nstep 2\nno attr\n'
-           'step 3\nno attr\nstep 2\n2rt: extra\nstep 3\nfinish 3\nstep 2\n'
-           'finish 2\n'):
-    fail('unexpected output from icinterleave')
-
 success('Pre-authentication framework tests')
diff --git a/src/tests/t_salt.py b/src/tests/t_salt.py
index 65084bbf3..8ea4303f0 100755
--- a/src/tests/t_salt.py
+++ b/src/tests/t_salt.py
@@ -16,13 +16,13 @@ def test_salt(realm, e1, salt, e2):
 
 # Enctype/salt pairs chosen with non-default salt types.
 # The enctypes are mostly arbitrary.
-salts = [('des3-cbc-sha1', 'norealm'),
+salts = [('aes128-cts-hmac-sha1-96', 'norealm'),
          ('arcfour-hmac', 'onlyrealm'),
-         ('aes128-cts-hmac-sha1-96', 'special')]
+         ('aes256-cts-hmac-sha1-96', 'special')]
 # These enctypes are chosen to cover the different string-to-key routines.
 # Omit ":normal" from aes256 to check that salttype defaulting works.
 second_kstypes = ['aes256-cts-hmac-sha1-96', 'arcfour-hmac:normal',
-                  'des3-cbc-sha1:normal']
+                  'aes128-cts-hmac-sha1-96:normal']
 
 # Test using different salt types in a principal's key list.
 # Parameters from one key in the list must not leak over to later ones.
diff --git a/src/util/k5test.py b/src/util/k5test.py
index 619f1995f..66ec5048e 100644
--- a/src/util/k5test.py
+++ b/src/util/k5test.py
@@ -1344,13 +1344,6 @@ _passes = [
     # No special settings; exercises AES256.
     ('default', None, None, None),
 
-    # Exercise the DES3 enctype.
-    ('des3', None,
-     {'libdefaults': {'permitted_enctypes': 'des3'}},
-     {'realms': {'$realm': {
-                    'supported_enctypes': 'des3-cbc-sha1:normal',
-                    'master_key_type': 'des3-cbc-sha1'}}}),
-
     # Exercise the arcfour enctype.
     ('arcfour', None,
      {'libdefaults': {'permitted_enctypes': 'rc4'}},
@@ -1365,13 +1358,6 @@ _passes = [
                     'supported_enctypes': 'aes128-cts:normal',
                     'master_key_type': 'aes128-cts'}}}),
 
-    # Exercise the camellia256-cts enctype.
-    ('camellia256', None,
-      {'libdefaults': {'permitted_enctypes': 'camellia256-cts'}},
-      {'realms': {'$realm': {
-                    'supported_enctypes': 'camellia256-cts:normal',
-                    'master_key_type': 'camellia256-cts'}}}),
-
     # Exercise the aes128-sha2 enctype.
     ('aes128-sha2', None,
       {'libdefaults': {'permitted_enctypes': 'aes128-sha2'}},
