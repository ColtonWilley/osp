EAP-TLS authentication support for PPP
======================================

1. Intro

    The Extensible Authentication Protocol (EAP; RFC 3748) is a
    security protocol that can be used with PPP.  It provides a means
    to plug in multiple optional authentication methods.

    Transport Level Security (TLS; RFC 2246) provides for mutual 
    authentication, integrity-protected ciphersuite negotiation and 
    key exchange between two endpoints.  It also provides for optional
    MPPE encryption.

    EAP-TLS (RFC 2716) encapsulates the TLS messages in EAP packets,
    allowing TLS mutual authentication to be used as a generic EAP
    mechanism. It also provides optional encryption using the MPPE
    protocol.

    This patch provides EAP-TLS support to pppd. This authentication
    method can be used in both client or server mode.


2. Building

    To build pppd with EAP-TLS support, CyaSSL (http://www.yassl.com)
    is required. Any version from 2.0.4 should work.
    
    Configure with the Fortress option, make and install as usual:

      % ./configure --enable-fortress
      % make
      % sudo make install


3. Configuration

    On the client side there are two ways to configure EAP-TLS:

    1. supply the appropriate 'ca', 'cert' and 'key' command-line parameters

    2. edit the /etc/ppp/eaptls-client file.
       Insert a line for each system with which you use EAP-TLS.
       The line is composed of this fields separated by tab:

       - Client name 
            The name used by the client for authentication, can be *
       - Server name
            The name of the server, can be *
       - Client certificate file 
            The file containing the certificate chain for the 
            client in PEM format
       - Server certificate file
            If you want to specify the certificate that the 
            server is allowed to use, put the certificate file name.
            Else put a dash '-'.
       - CA certificate file
            The file containing the trusted CA certificates in PEM
            format.
       - Client private key file
            The file containing the client private key in PEM format.


    On the server side edit the /etc/ppp/eaptls-server file.
    Insert a line for each system with which you use EAP-TLS.
    The line is composed of this fields separated by tab:

      - Client name
            The name used by the client for authentication, can be *
      - Server name
            The name of the server, can be *
      - Client certificate file
            If you want to specify the certificate that the
            client is allowed to use, put the certificate file name.
            Else put a dash '-'.
      - Server certificate file
            The file containing the certificate chain for the
            server in PEM format
      - CA certificate file
            The file containing the trusted CA certificates in PEM
            format.
      - Client private key file
            The file containing the server private key in PEM format.
      - addresses
            A list of IP addresses the client is allowed to use.


4. Options

      These pppd options are available:

      - ca <ca-file>
            Use the CA public certificate found in <ca-file> in PEM format
      - cert <cert-file>
            Use the client public certificate found in <cert-file> in PEM format
            or in engine:engine_id format
      - key <key-file>
            Use the client private key found in <key-file> in PEM format
            or in engine:engine_id format
      - need-peer-eap
            If the peer doesn't ask us to authenticate or doesn't use eap
            to authenticate us, disconnect.

      Note: 
            password-encrypted certificates can be used as of v0.94 of this 
            patch. The password for the eap-tls.key file is specified using 
            the regular
                password ....
            statement in the ppp options file, or by using the appropriate
            plugin which supplies a 'eaptls_passwd_hook' routine.

5. Connecting

    If you're setting up a pppd server, edit the EAP-TLS configuration file 
    as written above and then run pppd with the 'auth' option to authenticate
    the client. The EAP-TLS method will be used if the other eap methods can't
    be used (no secrets).

    If you're setting up a client, edit the configuration file and then run
    pppd with 'remotename' option to specify the server name. Add the 
    'need-peer-eap' option if you want to be sure the peer ask you to
    authenticate (and to use eap) and to disconnect if it doesn't.

6. Notes

   This is experimental code. It is based on code by Jan Just Keijser
   <janjust@nikhef.net>.

   Send suggestions and comments to info@yassl.com.

