From dccda2ad5df1954953b82d58e2fff3af7a8bc866 Mon Sep 17 00:00:00 2001
From: David Garske <david@wolfssl.com>
Date: Fri, 25 Sep 2020 13:48:23 -0700
Subject: [PATCH] Added wolfSSL support using `./configure --enable-ssl
 --with-wolfssl`. Build wolfSSL using: `./configure --enable-apachehttpd &&
 make && sudo make install`.

---
 acinclude.m4              | 94 +++++++++++++++++++++++++++++++++++++++
 modules/http2/h2_push.c   |  1 +
 modules/md/md_crypt.c     |  1 +
 modules/md/mod_md.h       |  1 +
 modules/ssl/ssl_private.h |  1 +
 support/ab.c              |  3 ++
 6 files changed, 101 insertions(+)

diff --git a/acinclude.m4 b/acinclude.m4
index ce1d637dd9..6bb7290aa0 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -477,6 +477,100 @@ AC_DEFUN([APACHE_REQUIRE_CXX],[
   fi
 ])
 
+dnl Check for wolfSSL
+ENABLED_WOLFSSL=no
+AC_MSG_NOTICE([----------------------------------------])
+AC_MSG_CHECKING([for wolfSSL])
+AC_ARG_WITH([wolfssl],
+  [AC_HELP_STRING([--with-wolfssl@<:@=DIR@:>@],
+    [Include wolfSSL support (default no, yes=/usr/local)]
+  )],
+  [
+    if test "x$withval" != "xno" ; then
+      dnl local variables
+      ap_wolfssl_mod_ldflags=""
+      ap_wolfssl_mod_cflags=""
+      ap_wolfssl_libs=""
+
+      dnl backup flags
+      saved_CPPFLAGS="$CPPFLAGS"
+      saved_LDFLAGS="$LDFLAGS"
+      saved_LIBS="$LIBS"
+
+      dnl determine wolfSSL location and flags
+      if test "x$withval" == "xyes" || test "x$withval" == "x" ; then
+          ap_wolfssl_mod_ldflags="-L/usr/local/lib"
+          ap_wolfssl_mod_cflags="-I/usr/local/include -I/usr/local/include/wolfssl"
+      else
+        if test -d "$withval/lib" ; then
+            ap_wolfssl_mod_ldflags="-L$withval/lib"
+        else
+            ap_wolfssl_mod_ldflags="-L$withval"
+        fi
+        if test -d "$withval/include"; then
+            ap_wolfssl_mod_cflags="-I$withval/include -I$withval/include/wolfssl"
+        else
+            ap_wolfssl_mod_cflags="-I$withval -I$withval/wolfssl"
+        fi
+      fi
+      ap_wolfssl_libs="-lwolfssl"
+      ap_wolfssl_mod_cflags="$ap_wolfssl_mod_cflags -DUSE_WOLFSSL"
+      
+      dnl test for wolfSSL
+      CPPFLAGS="$CPPFLAGS $ap_wolfssl_mod_cflags"
+      LDFLAGS="$LDFLAGS $ap_wolfssl_mod_ldflags"
+      LIBS="$LIBS $ap_wolfssl_libs"
+      AC_LINK_IFELSE([
+          AC_LANG_PROGRAM(
+          [[
+            #include <wolfssl/options.h>
+            #include <wolfssl/ssl.h>
+          ]], 
+          [[ 
+            wolfSSL_Init();
+          ]])
+        ],
+        [ wolfssl_linked=yes ],
+        [ wolfssl_linked=no ]
+      )
+
+      dnl restore flags
+      CPPFLAGS="$saved_CPPFLAGS"
+      LIBS="$saved_LIBS"
+      LDFLAGS="$saved_LDFLAGS"
+
+      if test "x$wolfssl_linked" == "xno" ; then
+        dnl handle library not found error
+        AC_MSG_ERROR([wolfSSL Library not found.
+            If it's already installed, specify its path using --with-wolfssl=/dir/])
+
+      else
+        ENABLED_WOLFSSL=yes
+
+        dnl make sure the SSL module is included
+        ac_cv_openssl=yes
+
+        AC_DEFINE(HAVE_WOLFSSL, 1, [Define if wolfSSL is available])
+
+        dnl add lib to module LDFLAGS and LIBS
+        MOD_LDFLAGS="$MOD_LDFLAGS $ap_wolfssl_libs"
+        LIBS="$LIBS $ap_wolfssl_libs"
+        APR_SETVAR(ab_LIBS, [$MOD_LDFLAGS])
+        APACHE_SUBST(ab_CFLAGS)
+        APACHE_SUBST(ab_LIBS)
+
+        dnl add CFLAGS and LDFLAGS to module and global
+        MOD_CFLAGS="$MOD_CFLAGS $ap_wolfssl_mod_cflags"
+        MOD_LDFLAGS="$MOD_LDFLAGS $ap_wolfssl_mod_ldflags"
+        CPPFLAGS="$CPPFLAGS $ap_wolfssl_mod_cflags"
+        LDFLAGS="$LDFLAGS $ap_wolfssl_mod_ldflags"
+      fi
+    fi
+  ]
+)
+AC_MSG_RESULT([$ENABLED_WOLFSSL])
+
+
 dnl
 dnl APACHE_CHECK_OPENSSL
 dnl
diff --git a/modules/http2/h2_push.c b/modules/http2/h2_push.c
index 9a3b19bdc2..8c6589a39a 100644
--- a/modules/http2/h2_push.c
+++ b/modules/http2/h2_push.c
@@ -23,6 +23,7 @@
 #include <apr_time.h>
 
 #ifdef H2_OPENSSL
+#include <wolfssl/options.h>
 #include <openssl/sha.h>
 #endif
 
diff --git a/modules/md/md_crypt.c b/modules/md/md_crypt.c
index e0aac3ec99..9c1152aef6 100644
--- a/modules/md/md_crypt.c
+++ b/modules/md/md_crypt.c
@@ -23,6 +23,7 @@
 #include <apr_file_io.h>
 #include <apr_strings.h>
 
+#include <wolfssl/options.h>
 #include <openssl/err.h>
 #include <openssl/evp.h>
 #include <openssl/pem.h>
diff --git a/modules/md/mod_md.h b/modules/md/mod_md.h
index 5ff8f5221c..22225a9569 100644
--- a/modules/md/mod_md.h
+++ b/modules/md/mod_md.h
@@ -17,6 +17,7 @@
 #ifndef mod_md_mod_md_h
 #define mod_md_mod_md_h
 
+#include <wolfssl/options.h>
 #include <openssl/evp.h>
 #include <openssl/x509v3.h>
 
diff --git a/modules/ssl/ssl_private.h b/modules/ssl/ssl_private.h
index f46814d0ad..8bcf2d9825 100644
--- a/modules/ssl/ssl_private.h
+++ b/modules/ssl/ssl_private.h
@@ -82,6 +82,7 @@
 #include "ap_expr.h"
 
 /* OpenSSL headers */
+#include <wolfssl/options.h>
 #include <openssl/opensslv.h>
 #if (OPENSSL_VERSION_NUMBER >= 0x10001000)
 /* must be defined before including ssl.h */
diff --git a/support/ab.c b/support/ab.c
index 410d58e56e..b8d85974f0 100644
--- a/support/ab.c
+++ b/support/ab.c
@@ -158,6 +158,7 @@
 
 #if defined(HAVE_OPENSSL)
 
+#include <wolfssl/options.h>
 #include <openssl/rsa.h>
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
@@ -2554,7 +2555,9 @@ int main(int argc, const char * const argv[])
                     meth = TLSv1_2_client_method();
 #endif
                 } else if (strncasecmp(opt_arg, "TLS1", 4) == 0) {
+#if !defined(NO_OLD_TLS) && defined(WOLFSSL_ALLOW_TLSV10)
                     meth = TLSv1_client_method();
+#endif
                 }
 #else /* #if OPENSSL_VERSION_NUMBER < 0x10100000L */
                 meth = TLS_client_method();
-- 
2.27.0

From c055f9b8af9b7d0bbccc6af5e66ad08c1b48595a Mon Sep 17 00:00:00 2001
From: David Garske <david@wolfssl.com>
Date: Wed, 4 Nov 2020 13:40:28 -0800
Subject: [PATCH] Added FIPS support to Apache v2.4.39.

---
 modules/ssl/ssl_engine_init.c | 29 +++++++++++++++++++++++++++++
 modules/ssl/ssl_util_ssl.c    |  2 ++
 2 files changed, 31 insertions(+)

diff --git a/modules/ssl/ssl_engine_init.c b/modules/ssl/ssl_engine_init.c
index 48d7b96cd8..9be1e22cf7 100644
--- a/modules/ssl/ssl_engine_init.c
+++ b/modules/ssl/ssl_engine_init.c
@@ -71,6 +71,7 @@ static int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
 }
 #endif
 
+#ifndef HAVE_FIPS
 /*
  * Grab well-defined DH parameters from OpenSSL, see the BN_get_rfc*
  * functions in <openssl/bn.h> for all available primes.
@@ -111,16 +112,21 @@ static struct dhparam {
     { BN_get_rfc2409_prime_1024, NULL, 0 }
 };
 
+#endif /* !HAVE_FIPS */
+
 static void init_dh_params(void)
 {
+#ifndef HAVE_FIPS
     unsigned n;
 
     for (n = 0; n < sizeof(dhparams)/sizeof(dhparams[0]); n++)
         dhparams[n].dh = make_dh_params(dhparams[n].prime);
+#endif
 }
 
 static void free_dh_params(void)
 {
+#ifndef HAVE_FIPS
     unsigned n;
 
     /* DH_free() is a noop for a NULL parameter, so these are harmless
@@ -130,6 +136,7 @@ static void free_dh_params(void)
         DH_free(dhparams[n].dh);
         dhparams[n].dh = NULL;
     }
+#endif
 }
 
 /* Hand out the same DH structure though once generated as we leak
@@ -141,12 +148,14 @@ static void free_dh_params(void)
  * to our copy. */
 DH *modssl_get_dh_params(unsigned keylen)
 {
+#ifndef HAVE_FIPS
     unsigned n;
 
     for (n = 0; n < sizeof(dhparams)/sizeof(dhparams[0]); n++)
         if (keylen >= dhparams[n].min)
             return dhparams[n].dh;
         
+#endif
     return NULL; /* impossible to reach. */
 }
 
@@ -194,6 +203,21 @@ static apr_status_t modssl_fips_cleanup(void *data)
 /*
  *  Per-module initialization
  */
+
+#ifdef HAVE_FIPS
+static void myFipsCb(int ok, int err, const char* hash)
+{
+    printf("in my Fips callback, ok = %d, err = %d\n", ok, err);
+    printf("message = %s\n", wc_GetErrorString(err));
+    printf("hash = %s\n", hash);
+
+    if (err == IN_CORE_FIPS_E) {
+        printf("In core integrity hash check failure, copy above hash\n");
+        printf("into verifyCore[] in fips_test.c and rebuild\n");
+    }
+}
+#endif /* HAVE_FIPS */
+
 apr_status_t ssl_init_Module(apr_pool_t *p, apr_pool_t *plog,
                              apr_pool_t *ptemp,
                              server_rec *base_server)
@@ -204,6 +228,11 @@ apr_status_t ssl_init_Module(apr_pool_t *p, apr_pool_t *plog,
     apr_status_t rv;
     apr_array_header_t *pphrases;
 
+#ifdef HAVE_FIPS
+    wolfCrypt_SetCb_fips(myFipsCb);
+    //wolfSSL_Debugging_ON();
+#endif
+
     if (SSLeay() < MODSSL_LIBRARY_VERSION) {
         ap_log_error(APLOG_MARK, APLOG_WARNING, 0, base_server, APLOGNO(01882)
                      "Init: this version of mod_ssl was compiled against "
diff --git a/modules/ssl/ssl_util_ssl.c b/modules/ssl/ssl_util_ssl.c
index b7f0eca173..178099e4a7 100644
--- a/modules/ssl/ssl_util_ssl.c
+++ b/modules/ssl/ssl_util_ssl.c
@@ -492,12 +492,14 @@ BOOL modssl_X509_match_name(apr_pool_t *p, X509 *x509, const char *name,
 DH *ssl_dh_GetParamFromFile(const char *file)
 {
     DH *dh = NULL;
+#ifndef HAVE_FIPS
     BIO *bio;
 
     if ((bio = BIO_new_file(file, "r")) == NULL)
         return NULL;
     dh = PEM_read_bio_DHparams(bio, NULL, NULL, NULL);
     BIO_free(bio);
+#endif
     return (dh);
 }
 
-- 
2.27.0

