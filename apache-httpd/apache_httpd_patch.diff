diff --git a/acinclude.m4 b/acinclude.m4
index ce1d637..9058e91 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -477,6 +477,88 @@ AC_DEFUN([APACHE_REQUIRE_CXX],[
   fi
 ])

+dnl Check for wolfSSL
+ENABLED_WOLFSSL=no
+AC_MSG_NOTICE([----------------------------------------])
+AC_MSG_CHECKING([for wolfSSL])
+AC_ARG_WITH([wolfssl],
+  [AC_HELP_STRING([--with-wolfssl@<:@=DIR@:>@],
+    [Include wolfSSL support (default no, yes=/usr/local)]
+  )],
+  [
+    if test "x$withval" != "xno" ; then
+      dnl local variables
+      ap_wolfssl_mod_ldflags=""
+      ap_wolfssl_mod_cflags=""
+      ap_wolfssl_libs=""
+
+      dnl backup flags
+      saved_CPPFLAGS="$CPPFLAGS"
+      saved_LDFLAGS="$LDFLAGS"
+      saved_LIBS="$LIBS"
+
+      dnl determine wolfSSL location and flags
+      if test "x$withval" == "xyes" || test "x$withval" == "x" ; then
+          ap_wolfssl_mod_ldflags="-L/usr/local/lib"
+          ap_wolfssl_mod_cflags="-I/usr/local/include -I/usr/local/include/wolfssl"
+      else
+        if test -d "$withval/lib" ; then
+            ap_wolfssl_mod_ldflags="-L$withval/lib"
+        else
+            ap_wolfssl_mod_ldflags="-L$withval"
+        fi
+        if test -d "$withval/include"; then
+            ap_wolfssl_mod_cflags="-I$withval/include -I$withval/include/wolfssl"
+        else
+            ap_wolfssl_mod_cflags="-I$withval -I$withval/wolfssl"
+        fi
+      fi
+      ap_wolfssl_libs="-lwolfssl"
+      ap_wolfssl_mod_cflags="$ap_wolfssl_mod_cflags -DUSE_WOLFSSL"
+
+      dnl test for wolfSSL
+      CPPFLAGS="$CPPFLAGS $ap_wolfssl_mod_cflags"
+      LDFLAGS="$LDFLAGS $ap_wolfssl_mod_ldflags"
+      LIBS="$LIBS $ap_wolfssl_libs"
+      AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <wolfssl/ssl.h>]], [[ wolfSSL_Init(); ]])], [ wolfssl_linked=yes ],[ wolfssl_linked=no ])
+
+      dnl restore flags
+      CPPFLAGS="$saved_CPPFLAGS"
+      LIBS="$saved_LIBS"
+      LDFLAGS="$saved_LDFLAGS"
+
+      if test "x$wolfssl_linked" == "xno" ; then
+        dnl handle library not found error
+        AC_MSG_ERROR([wolfSSL Library not found.
+            If it's already installed, specify its path using --with-wolfssl=/dir/])
+
+      else
+        ENABLED_WOLFSSL=yes
+
+        dnl make sure the SSL module is included
+        ac_cv_openssl=yes
+
+        AC_DEFINE(HAVE_WOLFSSL, 1, [Define if wolfSSL is available])
+
+        dnl add lib to module LDFLAGS and LIBS
+        MOD_LDFLAGS="$MOD_LDFLAGS $ap_wolfssl_libs"
+        LIBS="$LIBS $ap_wolfssl_libs"
+        APR_SETVAR(ab_LIBS, [$MOD_LDFLAGS])
+        APACHE_SUBST(ab_CFLAGS)
+        APACHE_SUBST(ab_LIBS)
+
+        dnl add CFLAGS and LDFLAGS to module and global
+        MOD_CFLAGS="$MOD_CFLAGS $ap_wolfssl_mod_cflags"
+        MOD_LDFLAGS="$MOD_LDFLAGS $ap_wolfssl_mod_ldflags"
+        CPPFLAGS="$CPPFLAGS $ap_wolfssl_mod_cflags"
+        LDFLAGS="$LDFLAGS $ap_wolfssl_mod_ldflags"
+      fi
+    fi
+  ]
+)
+AC_MSG_RESULT([$ENABLED_WOLFSSL])
+
+
 dnl
 dnl APACHE_CHECK_OPENSSL
 dnl

diff --git a/modules/ssl/ssl_engine_kernel.c b/modules/ssl/ssl_engine_kernel.c
index 41c4015..3b77691 100644
--- a/modules/ssl/ssl_engine_kernel.c
+++ b/modules/ssl/ssl_engine_kernel.c
@@ -1005,7 +1005,9 @@ static int ssl_hook_Access_classic(request_rec *r, SSLSrvConfigRec *sc, SSLDirCo
              * Peeking 0 bytes actually works.
              * See: http://marc.info/?t=145493359200002&r=1&w=2
              */
+#if !defined(HAVE_WOLFSSL)
             SSL_peek(ssl, peekbuf, 0);
+#endif
 
             sslconn->reneg_state = RENEG_REJECT;

diff --git a/modules/ssl/ssl_private.h b/modules/ssl/ssl_private.h
index f46814d..8bcf2d9 100644
--- a/modules/ssl/ssl_private.h
+++ b/modules/ssl/ssl_private.h
@@ -82,6 +82,7 @@
 #include "ap_expr.h"
 
 /* OpenSSL headers */
+#include <wolfssl/options.h>
 #include <openssl/opensslv.h>
 #if (OPENSSL_VERSION_NUMBER >= 0x10001000)
 /* must be defined before including ssl.h */

diff --git a/modules/ssl/ssl_engine_io.c b/modules/ssl/ssl_engine_io.c
index 9f9b6c8..1371603 100644
--- a/modules/ssl/ssl_engine_io.c
+++ b/modules/ssl/ssl_engine_io.c
@@ -480,7 +480,11 @@ static int bio_filter_in_read(BIO *bio, char *in, int inlen)
         if (APR_STATUS_IS_EAGAIN(inctx->rc) || APR_STATUS_IS_EINTR(inctx->rc)
                || (inctx->rc == APR_SUCCESS && APR_BRIGADE_EMPTY(inctx->bb))) {
             BIO_set_retry_read(bio);
+#if defined(HAVE_WOLFSSL)
+            return WOLFSSL_CBIO_ERR_WANT_READ;
+#else
             return -1;
+#endif
         }
 
         if (block == APR_BLOCK_READ 
@@ -1356,8 +1360,9 @@ static apr_status_t ssl_io_filter_handshake(ssl_filter_ctx_t *filter_ctx)
             outctx->rc = APR_EAGAIN;
             return APR_EAGAIN;
         }
-        else if (ERR_GET_LIB(ERR_peek_error()) == ERR_LIB_SSL &&
-                 ERR_GET_REASON(ERR_peek_error()) == SSL_R_HTTP_REQUEST) {
+        else if ((ERR_GET_LIB(ERR_peek_error()) == ERR_LIB_SSL &&
+                 ERR_GET_REASON(ERR_peek_error()) == SSL_R_HTTP_REQUEST) ||
+                 (ssl_err = UNKNOWN_RECORD_TYPE)) {
             /*
              * The case where OpenSSL has recognized a HTTP request:
              * This means the client speaks plain HTTP on our HTTPS port.

diff --git a/support/ab.c b/support/ab.c
index 779ef4c..80c1e15 100644
--- a/support/ab.c
+++ b/support/ab.c
@@ -158,6 +158,7 @@
 
 #if defined(HAVE_OPENSSL)
 
+#include <wolfssl/options.h>
 #include <openssl/rsa.h>
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
@@ -2554,7 +2555,9 @@ int main(int argc, const char * const argv[])
                     meth = TLSv1_2_client_method();
 #endif
                 } else if (strncasecmp(opt_arg, "TLS1", 4) == 0) {
+#if !defined(NO_OLD_TLS) && defined(WOLFSSL_ALLOW_TLSV10)
                     meth = TLSv1_client_method();
+#endif
                 }
 #else /* #if OPENSSL_VERSION_NUMBER < 0x10100000L */
                 meth = TLS_client_method();
